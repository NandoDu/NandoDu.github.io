<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python导出exe文件的注意事项</title>
      <link href="/2020/06/09/pyinstaller/"/>
      <url>/2020/06/09/pyinstaller/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;昨天在使用pyinstaller导出exe的时候，遇到了一些问题，在这里分享一下解决办法，我参考了<a href="https://blog.csdn.net/qq_42063091/article/details/82423221这样一篇博客，也综合了其他博客的解决办法，得到了一个最终的结果。" target="_blank" rel="noopener">https://blog.csdn.net/qq_42063091/article/details/82423221这样一篇博客，也综合了其他博客的解决办法，得到了一个最终的结果。</a></p><h2 id="下载pyinstaller"><a href="#下载pyinstaller" class="headerlink" title="下载pyinstaller"></a>下载pyinstaller</h2><p>&emsp;&emsp;老方法，打开命令行，pip install pyinstaller，或者使用pycharm做集成开发的朋友也可以在terminal里进行这一步操作。</p><h2 id="导出py文件"><a href="#导出py文件" class="headerlink" title="导出py文件"></a>导出py文件</h2><p>&emsp;&emsp;我们项目里可能会有很多个py文件以及其他文件，我们不需要把它们一起打包，只需要打包最核心的执行文件，比如我们在此处以main.py这个名字为例，该文件是整个程序的入口，那么我们只需要对这个文件进行打包即可。</p><p>&emsp;&emsp;pyinstaller具体的打包指令此处不加以赘述，到网上查会查到很多方法，此处推荐使用带控制台的导出方法（因为涉及多次导出）。第一次导出之后，我们会得到build和dist两个文件夹，我们的exe就放在dist子目录下。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>&emsp;&emsp;执行dist文件夹下的exe文件，屏幕闪过一个控制台（如果不带控制台导出，则看不到任何反应），这时我们的exe文件存在问题。打开命令行，进入该目录下，再通过命令行执行该文件，得到报错信息：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">…Failed to execute script main</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后会提示我们缺少哪个module。此时我们回到项目原来的目录，会发现main.py的下面多了一个main.spec，打开main.spec，找到hiddenimports列表，发现是空的，我们按照之前的报错信息，将module的名称填进去，再用installer对main.spec进行打包，覆盖原来的输出文件，重复上述过程，直到添加好所有需要的module，导出结束。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyinstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习入门(五)</title>
      <link href="/2020/06/05/machineLearning5/"/>
      <url>/2020/06/05/machineLearning5/</url>
      
        <content type="html"><![CDATA[<h2 id="Neural-Network-Classification"><a href="#Neural-Network-Classification" class="headerlink" title="Neural Network(Classification)"></a>Neural Network(Classification)</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20143917.png"  alt=""></p><ul><li><p>L表示neural network的层数</p></li><li><p>sl表示第l层的unit数</p></li><li><p>K可以用来表示output layer的unit数</p></li></ul><h2 id="Cost-Function-for-the-Neural-Network"><a href="#Cost-Function-for-the-Neural-Network" class="headerlink" title="Cost Function for the Neural Network"></a>Cost Function for the Neural Network</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20145249.png"  alt=""></p><h2 id="Backpropagation-Algorithm"><a href="#Backpropagation-Algorithm" class="headerlink" title="Backpropagation Algorithm"></a>Backpropagation Algorithm</h2><h3 id="Gradient-computation"><a href="#Gradient-computation" class="headerlink" title="Gradient computation"></a>Gradient computation</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20150145.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20185201.png"  alt=""></p><h3 id="Backpropagation-algorithm-only-a-training-set-of-one-example"><a href="#Backpropagation-algorithm-only-a-training-set-of-one-example" class="headerlink" title="Backpropagation algorithm: only a training set of one example"></a>Backpropagation algorithm: only a training set of one example</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20185726.png"  alt=""></p><h3 id="Backpropagation-algorithm-a-training-set-of-m-examples"><a href="#Backpropagation-algorithm-a-training-set-of-m-examples" class="headerlink" title="Backpropagation algorithm: a training set of m examples"></a>Backpropagation algorithm: a training set of m examples</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20190754.png"  alt=""></p><h3 id="Backpropagation-Intuition"><a href="#Backpropagation-Intuition" class="headerlink" title="Backpropagation Intuition"></a>Backpropagation Intuition</h3><p>为了进一步理解backpropagation algorithm，我们可以参考之前学过的forward propagation algorithm：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20192536.png"  alt=""></p><p>为了方便理解，我们先对backpropagation algorithm做一些简化：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20192952.png"  alt=""></p><p>这样，我们通过下图就能对backpropagation algorithm有更直观的理解：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20193124.png"  alt=""></p><h3 id="Implementation-Note-Unrolling-Parameters"><a href="#Implementation-Note-Unrolling-Parameters" class="headerlink" title="Implementation Note: Unrolling Parameters"></a>Implementation Note: Unrolling Parameters</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20195348.png"  alt=""></p><p>对于上述的reshape方法，我们可以通过Octave控制台进行检验：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; Theta1 &#x3D; ones(10,11)</span><br><span class="line">Theta1 &#x3D;</span><br><span class="line"></span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; Theta2 &#x3D; 2*ones(10,11)</span><br><span class="line">Theta2 &#x3D;</span><br><span class="line"></span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; Theta3 &#x3D; 3*ones(1,11)</span><br><span class="line">Theta3 &#x3D;</span><br><span class="line"></span><br><span class="line">   3   3   3   3   3   3   3   3   3   3   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; thetaVec &#x3D; [Theta1(:); Theta2(:); Theta3(:)];</span><br><span class="line">&gt;&gt; size(thetaVec)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   231     1</span><br><span class="line"></span><br><span class="line">&gt;&gt; reshape(thetaVec(1:110),10,11)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line">   1   1   1   1   1   1   1   1   1   1   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; reshape(thetaVec(111:220),10,11)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line">   2   2   2   2   2   2   2   2   2   2   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; reshape(thetaVec(221:231),1,11)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   3   3   3   3   3   3   3   3   3   3   3</span><br></pre></td></tr></table></figure><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20200040.png"  alt=""></p><p>此处给出了unrolling parameters在learning algorithm中的用途。</p><h2 id="Gradient-Checking"><a href="#Gradient-Checking" class="headerlink" title="Gradient Checking"></a>Gradient Checking</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-05%20234502.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-06%20000759.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-06%20000852.png"  alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习入门(四)</title>
      <link href="/2020/06/04/machineLearning4/"/>
      <url>/2020/06/04/machineLearning4/</url>
      
        <content type="html"><![CDATA[<h2 id="Neural-Networks"><a href="#Neural-Networks" class="headerlink" title="Neural Networks"></a>Neural Networks</h2><h3 id="history-of-development"><a href="#history-of-development" class="headerlink" title="history of development"></a>history of development</h3><p>Origins: Algorithms that try to mimic the brain.</p><p>Was very widely used in 80s and early 90s; popularity diminished in late 90s.</p><p>Recent resurgence: State-of-the-art technique for many applications.</p><h3 id="neuro-rewiring-experiments"><a href="#neuro-rewiring-experiments" class="headerlink" title="neuro-rewiring experiments"></a>neuro-rewiring experiments</h3><p>生物学中的许多neuro-rewiring experiments(神经重接实验)，已能够间接证明，人脑皮层不同功能区域，似乎都具有某种相同的学习能力，用于学习其他不同区域的功能，而人工神经网络的目的正是模拟该学习功能。</p><h3 id="Neuron-in-the-brain"><a href="#Neuron-in-the-brain" class="headerlink" title="Neuron in the brain"></a>Neuron in the brain</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20165402.png"  alt=""></p><p>The neuron has a number of input wires, and these are called the <strong>dendrites</strong>. Abd a neuron also has an output wire called an <strong>Axon</strong>, and this output wire is what it uses to send signals to other neurons.</p><h3 id="Neuron-model-Logistic-unit"><a href="#Neuron-model-Logistic-unit" class="headerlink" title="Neuron model: Logistic unit"></a>Neuron model: Logistic unit</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20170005.png"  alt=""></p><ul><li><p>This is a very simple, maybe a vastly oversimplified model.</p></li><li><p>The x0 is called the bias unit or the bias neuron, and it’s already equals to 1. Depending on situations, we choose to draw it or not.</p></li><li><p>We call this diagram a neuron or an artificial neuron with a Sigmoid or logistic activation function.</p></li><li><p>Theta can be called the parameters of the model or <strong>weights of the model</strong>.</p></li></ul><h3 id="Neural-Network-Model-Representation"><a href="#Neural-Network-Model-Representation" class="headerlink" title="Neural Network Model Representation"></a>Neural Network Model Representation</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20171443.png"  alt=""></p><ul><li><p>The neural network has three layers: layer 1, layer 2 and layer 3. </p></li><li><p>Layer 1 is also called Input Layer, and Layer 2 is also called Hidden Layer and Layer 3 is Output Layer.</p></li><li><p>The term hidden layer isn’t a great terminology, but this ideation is that we can’t get to observe in the training setup. It’s not x, and it’s not y, and so we call those hidden.</p></li></ul><h3 id="Mathematical-Definition"><a href="#Mathematical-Definition" class="headerlink" title="Mathematical Definition"></a>Mathematical Definition</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20173026.png"  alt=""></p><ul><li><p>此处字母上标表示所在的layer序号，下标表示unit序号</p></li><li><p>Layer 1到Layer 2的计算过程中，theta的下标可以理解成theta矩阵的position</p></li><li><p>下一层到上一层的计算过程中，theta的维度取值为“上一层unit个数加1 * 下一层unit个数”，此处加1可以理解成将x0、a0涵盖在内</p></li></ul><h3 id="Forward-propagation-Vectorized-implementation"><a href="#Forward-propagation-Vectorized-implementation" class="headerlink" title="Forward propagation: Vectorized implementation"></a>Forward propagation: Vectorized implementation</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20174149.png"  alt=""></p><p>This process computing h of x is also called forward propagation and is called that because we start of with the activations of the input-units and then we sort of forward-propagate that to the hidden layer and compute the activation of the hidden layer and then we sort of forward propagate that and compute the activations of the output layer, and that’s also called forward propagation and what we just did is we just worked out a vector wise implementation of this procedure.</p><h3 id="Neural-Network-learning-its-own-features"><a href="#Neural-Network-learning-its-own-features" class="headerlink" title="Neural Network learning its own features"></a>Neural Network learning its own features</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20174925.png"  alt=""></p><p>这意味着，相比于我们输入的raw inputs，neural network通过计算得到它所需要的新的features，而新的features与output之间的关系，就又回到我们之前讨论的logistic regression，因此neural network的本质其实就是根据raw inputs来逐层推导从而得出新的features。</p><h3 id="Other-network-architectures"><a href="#Other-network-architectures" class="headerlink" title="Other network architectures"></a>Other network architectures</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20175429.png"  alt=""></p><p>Here we have three heading units that are computing some complex function maybe of the input layer, and then the third layer can take the second layer’s features and compute even more complex features in layer three so that by the time you get to the output layer, layer four, you can have even more complex features of what you are able to compute in layer three and so get very interesting nonlinear hypotheses.</p><h3 id="Single-Neurons-in-a-Neural-Network-Example"><a href="#Single-Neurons-in-a-Neural-Network-Example" class="headerlink" title="Single Neurons in a Neural Network Example"></a>Single Neurons in a Neural Network Example</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20180603.png"  alt=""></p><ul><li><p>这是一个简单的neural network模型，只有两层</p></li><li><p>y只能取0或1，属于分类问题</p></li><li><p>根据g(x)的图像可知，当x取-4.6时，g(x)的值接近0，当x取4.6时，g(x)的值接近1</p></li><li><p>theta矩阵取[-30 20 20]时，能实现一个AND逻辑函数</p></li></ul><h3 id="Complex-Neural-Network-Example"><a href="#Complex-Neural-Network-Example" class="headerlink" title="Complex Neural Network Example"></a>Complex Neural Network Example</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20181642.png"  alt=""></p><p>We use the neural network to compute (x1 AND x2) OR ((NOT x1) AND (NOT x2)). And it’s clear that from layer 1 to layer 2, we compute x1 AND x2 and (NOT x1) AND (NOT x2) respectively. And from layer 2 to layer 3, we actually get X1 OR X2 where X1 and X2 represent the results we get in the last procedure.</p><h3 id="Multiclass-Classification-Example"><a href="#Multiclass-Classification-Example" class="headerlink" title="Multiclass Classification Example"></a>Multiclass Classification Example</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20183252.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-04%20183226.png"  alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习入门(三)</title>
      <link href="/2020/06/02/machineLearning3/"/>
      <url>/2020/06/02/machineLearning3/</url>
      
        <content type="html"><![CDATA[<h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><h3 id="examples-and-definition"><a href="#examples-and-definition" class="headerlink" title="examples and definition"></a>examples and definition</h3><p>Email: Spam / Not Spam?</p><p>Online Transactions: Fraudulent(Yes / No)?</p><p>Tumor: Malignant / Benign?</p><p>y ∈ {0, 1}</p><p>0: “Negative Class”(e.g. benign tumor)</p><p>1: “Positive Class”(e.g. malignant tumor)</p><h3 id="Why-we’d-better-not-use-linear-regression"><a href="#Why-we’d-better-not-use-linear-regression" class="headerlink" title="Why we’d better not use linear regression?"></a>Why we’d better not use linear regression?</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20103855.png"  alt=""></p><p>如上图所示，当我们的数据较为集中时，linear regression尚能满足我们的要求，我们可以以0.5为界，大于等于0.5的部分，我们预测”y=1”，小于0.5的部分，我们预测”y=0”。但是当出现跨度较大的数据时，即使该数据本身并无必须存在的意义，但它的存在会对我们的绘图造成影响，从而出现较大的预测误差。另一个问题就是，我们希望绘制出的图像取值在[0, 1]，而linear regression会让我们的取值小于0或者大于1，这一点也不符合我们的需求。</p><h3 id="Hypothesis-Representation"><a href="#Hypothesis-Representation" class="headerlink" title="Hypothesis Representation"></a>Hypothesis Representation</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20110012.png"  alt=""></p><p>Logistic function，又名Sigmoid function（S型曲线），可以用来解决前文所说的取值范围问题。</p><h4 id="Interpretation-of-Hypothesis-Output"><a href="#Interpretation-of-Hypothesis-Output" class="headerlink" title="Interpretation of Hypothesis Output"></a>Interpretation of Hypothesis Output</h4><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20110608.png"  alt=""></p><p>由于Classification问题中，实际取值只有0和1两个值，因此h(x)的取值，实际是Classification取1时候的可能性。</p><h3 id="Decision-Boundary"><a href="#Decision-Boundary" class="headerlink" title="Decision Boundary"></a>Decision Boundary</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20112414.png"  alt=""></p><p>我们假设大于等于0.5时，”y=1”；小于0.5时，”y=0”。这样，通过观察图像可知，θ’x大于等于0时，”y=1”；小于0时，”y=0”。这一结论对我们的解题有很大的帮助。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20112815.png"  alt=""></p><p>如图是Decision Boundary的例子，我们通过计算确定x1、x2的不同取值对应的y值，得到如图所示的Decision Boundary。但是需要注意的是，该Decision Boundary虽然由数据集估算得出，但本身并不依赖于数据集，即清空数据集，该Decision Boundary仍是有效的，数据集只是用来辅助我们求出结果。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20113146.png"  alt=""></p><p>而这一例子更为复杂，但是求法与上述例子相同。</p><h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><h3 id="Traditional-Algorithm"><a href="#Traditional-Algorithm" class="headerlink" title="Traditional Algorithm"></a>Traditional Algorithm</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20141411.png"  alt=""></p><p>如上图所示，按照原来公式计算代价的话，得到的是一个”non-convex”的图像，这不利于我们寻找global minimum。</p><h3 id="Logistic-regression-cost-function"><a href="#Logistic-regression-cost-function" class="headerlink" title="Logistic regression cost function"></a>Logistic regression cost function</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20142331.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20142403.png"  alt=""></p><p>简单地分析第一幅图，如果”y=1”，那么我们预测的值越接近1，所需要的代价就越小，当我们预测的值恰好为1时，代价最小，为0；反之，我们预测的值越偏离1，代价就越大，当我们预测的值为0时，代价最大，为正无穷。</p><h3 id="Simplified-Cost-Function-and-Gradient-Descent"><a href="#Simplified-Cost-Function-and-Gradient-Descent" class="headerlink" title="Simplified Cost Function and Gradient Descent"></a>Simplified Cost Function and Gradient Descent</h3><h4 id="Simplified-Cost-Function"><a href="#Simplified-Cost-Function" class="headerlink" title="Simplified Cost Function"></a>Simplified Cost Function</h4><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20143932.png"  alt=""></p><p>此处，我们对Cost Function做进一步化简。</p><h4 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h4><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20144139.png"  alt=""></p><p>梯度下降算法本质上是不变的，但是与linear regression相比，h(x)的取值发生变化。</p><h3 id="Advanced-Optimization"><a href="#Advanced-Optimization" class="headerlink" title="Advanced Optimization"></a>Advanced Optimization</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20145454.png"  alt=""></p><p>此处给出了三种不同于Gradient Descent的算法，它们能更高效地计算出最优解。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20145643.png"  alt=""></p><p>我们虽然暂时无法了解三种算法的具体实现过程，但是可以通过Octave直接调用高级算法进行计算。图片中右上角给出的是Function文件内容，底部给出的是Octave控制台输入的命令。</p><h2 id="Multiclass-Classification"><a href="#Multiclass-Classification" class="headerlink" title="Multiclass Classification"></a>Multiclass Classification</h2><h3 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h3><p>Email foldering/tagging: Work, Friends, Family, Hobby</p><p>Medical diagrams: Not ill, Cold, Flu</p><p>Weather: Sunny, Cloudy, Rain, Snow</p><h3 id="Compared-with-Binary-Classification"><a href="#Compared-with-Binary-Classification" class="headerlink" title="Compared with Binary Classification"></a>Compared with Binary Classification</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20153910.png"  alt=""></p><h3 id="One-vs-all-One-vs-rest"><a href="#One-vs-all-One-vs-rest" class="headerlink" title="One-vs-all(One-vs-rest)"></a>One-vs-all(One-vs-rest)</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20154044.png"  alt=""></p><p>此处说明，解决多类别分类问题时，我们将多类别划分为多个分类器，并针对每个分类器求出对应的h(x) with theta。</p><p>具体的实现方法如下图所示：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20154307.png"  alt=""></p><h2 id="Overfitting-Problem"><a href="#Overfitting-Problem" class="headerlink" title="Overfitting Problem"></a>Overfitting Problem</h2><h3 id="example-and-definition"><a href="#example-and-definition" class="headerlink" title="example and definition"></a>example and definition</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20155319.png"  alt=""></p><p>三幅图像中，第一幅图像为”Underfit”，或者说它有”High bias”，第二幅图像为”Just right”，第三幅图像为”Overfit”，或者说它有”High variance”。Overfitting Problem产生的原因，可以认为是过度迎合数据，而失去了预测价值。</p><h3 id="Addressing-Overfitting"><a href="#Addressing-Overfitting" class="headerlink" title="Addressing Overfitting"></a>Addressing Overfitting</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20155728.png"  alt=""></p><p>我们想要确定是否产生了Overfitting Problem，最直接的想法是plot一下，但是由于Overfitting Problem多是由feature过多导致的，因此我们往往无法绘制多维图像，所以我们才会采取上述方式去确认Overfitting Problem。</p><h2 id="Regularization-正则化"><a href="#Regularization-正则化" class="headerlink" title="Regularization(正则化)"></a>Regularization(正则化)</h2><h3 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20204922.png"  alt=""></p><p>对于右图复杂的模型，只需控制θ3和θ4的大小，即可使得模型达到与左图类似的结果。</p><h3 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20205407.png"  alt=""></p><p>如上过程就是正则化的过程，注意正则化是不带θ0的，其实带和不带在实际运用中只会有很小的差异，所以不必在意。现在只需要控制λ的大小，当λ很大时，θ1到θn就会很小，即达到了约束数量庞大的特征的目的。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20205744.png"  alt=""></p><p>需要注意的是，若选择过大的λ，会使得参数向量θ非常小，从而只剩下θ0，使得模型看起来像一条直线，这也不是我们想要的结果。</p><h3 id="Regularized-Linear-Regression"><a href="#Regularized-Linear-Regression" class="headerlink" title="Regularized Linear Regression"></a>Regularized Linear Regression</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20210006.png"  alt=""></p><p>如上是带有正则化项的梯度下降算法，θ0需要进行单独的特殊处理。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20210413.png"  alt=""></p><p>此处是关于Normal Equation的正则化过程，而且正则化保证了括号内的矩阵一定可逆。</p><h3 id="Regularized-Logistic-Regression"><a href="#Regularized-Logistic-Regression" class="headerlink" title="Regularized Logistic Regression"></a>Regularized Logistic Regression</h3><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20210801.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20210939.png"  alt=""></p><p>此处给出的是正则化的Gradient Descent形式。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用OpenCV进行照片的人眼识别</title>
      <link href="/2020/06/02/eyeRecognition/"/>
      <url>/2020/06/02/eyeRecognition/</url>
      
        <content type="html"><![CDATA[<p>本文基于Python3.7+cv2实现人脸识别和人眼识别。</p><h2 id="Python3引入cv2库的问题"><a href="#Python3引入cv2库的问题" class="headerlink" title="Python3引入cv2库的问题"></a>Python3引入cv2库的问题</h2><p>看了网上的很多解答，其实大可不必那么麻烦，比如到网上下载OpenCV的文件什么什么的。直接打开Pycharm，选择我们使用的Python环境，在cv2报错部分，选择’more actions’，Pycharm默认会让我们选择下载cv2包，但是Python3环境下会下载失败，所以我们选择下载OpenCV的包，这样程序就不会在引入cv2时报错了。</p><h2 id="引入xml文件"><a href="#引入xml文件" class="headerlink" title="引入xml文件"></a>引入xml文件</h2><p>参考<a href="">https://blog.csdn.net/wwq114/article/details/90740419</a>这篇博文，OpenCV人脸检测在github上是有开源项目的，打开网址<a href="">https://github.com/opencv/opencv/tree/master/data/haarcascades</a>下载其中的haarcascade_eye.xml以及haarcascade_frontalface_default.xml文件，导入到我们的项目工程中，至此前期准备结束。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment"># 载入人脸识别和眼睛识别的两个xml文件</span></span><br><span class="line">face_xml = cv2.CascadeClassifier(<span class="string">'haarcascade_frontalface_default.xml'</span>)</span><br><span class="line">eye_xml = cv2.CascadeClassifier(<span class="string">'haarcascade_eye.xml'</span>)</span><br><span class="line"><span class="comment"># 载入图片</span></span><br><span class="line"><span class="comment"># 不支持中文名</span></span><br><span class="line">img = cv2.imread(<span class="string">'second.tif'</span>)</span><br><span class="line"><span class="comment"># 灰度处理</span></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"><span class="comment"># 人脸识别</span></span><br><span class="line">face = face_xml.detectMultiScale(gray, <span class="number">1.3</span>, <span class="number">2</span>)  <span class="comment"># 参数：1、灰度图片， 2、缩放比例， 3、阈值</span></span><br><span class="line">print(<span class="string">"这张图片中有%d张人脸"</span> % len(face))</span><br><span class="line"><span class="comment"># 绘制出识别到的人脸</span></span><br><span class="line"><span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> face:</span><br><span class="line">    <span class="comment"># 绘制人脸方框</span></span><br><span class="line">    <span class="comment"># cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)</span></span><br><span class="line">    <span class="comment"># 在人脸的基础上识别眼睛</span></span><br><span class="line">    print(x)</span><br><span class="line">    print(y)</span><br><span class="line">    print(w)</span><br><span class="line">    print(h)</span><br><span class="line">    face_gray = gray[y:y+h, x:x+w]</span><br><span class="line">    face_color = img[y:y+h, x:x+w]</span><br><span class="line">    <span class="comment"># 眼睛识别</span></span><br><span class="line">    eyes = eye_xml.detectMultiScale(face_gray)</span><br><span class="line">    print(<span class="string">"在这张脸上有2个眼睛"</span>)</span><br><span class="line">    print(<span class="string">'('</span> + str(x) + <span class="string">', '</span> + str(y) + <span class="string">')'</span> + <span class="string">', '</span> + <span class="string">'('</span> + str(x + w) + <span class="string">', '</span> + str(y + h) + <span class="string">')'</span>)</span><br><span class="line">    <span class="comment"># 绘制出识别到的眼睛</span></span><br><span class="line">    <span class="keyword">for</span> (e_x, e_y, e_w, e_h) <span class="keyword">in</span> eyes:</span><br><span class="line">        <span class="keyword">if</span> int((e_y + e_y + e_h) / <span class="number">2</span>) &gt; int(h / <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        cv2.rectangle(face_color, (e_x, e_y), (e_x+e_w, e_y+e_h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>)  <span class="comment"># 绘制眼睛方框</span></span><br><span class="line">        ptStart1 = (int((e_x + e_x + e_h) / <span class="number">2</span>) - int(e_w / <span class="number">8</span>), int((e_y + e_y + e_h) / <span class="number">2</span>))</span><br><span class="line">        ptEnd1 = (int((e_x + e_x + e_h) / <span class="number">2</span>) + int(e_w / <span class="number">8</span>), int((e_y + e_y + e_h) / <span class="number">2</span>))</span><br><span class="line">        ptStart2 = (int((e_x + e_x + e_h) / <span class="number">2</span>), int((e_y + e_y + e_h) / <span class="number">2</span>) - int(e_h / <span class="number">8</span>))</span><br><span class="line">        ptEnd2 = (int((e_x + e_x + e_h) / <span class="number">2</span>), int((e_y + e_y + e_h) / <span class="number">2</span>) + int(e_h / <span class="number">8</span>))</span><br><span class="line">        point_color = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)  <span class="comment"># BGR</span></span><br><span class="line">        thickness = <span class="number">1</span></span><br><span class="line">        lineType = <span class="number">8</span></span><br><span class="line">        cv2.line(face_color, ptStart1, ptEnd1, point_color, thickness, lineType)</span><br><span class="line">        cv2.line(face_color, ptStart2, ptEnd2, point_color, thickness, lineType)</span><br><span class="line">        print(<span class="string">'('</span> + str(int((e_x + e_x + e_h) / <span class="number">2</span>) - int(e_w / <span class="number">8</span>)) + <span class="string">', '</span> + str(int((e_y + e_y + e_h) / <span class="number">2</span>)) + <span class="string">')'</span>)</span><br><span class="line">cv2.imshow(<span class="string">'dst'</span>, img)</span><br><span class="line"><span class="comment"># 保存图片</span></span><br><span class="line"><span class="comment"># cv2.imwrite('second_res.tif', img)</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>网上提供的源代码是有一定问题的，所以我稍加修改，并且追加了瞳孔十字光标定位的功能。但是该代码还是存在一些问题，比如有时候只能识别一只眼睛（可能与戴眼镜有关系），再比如会把鼻孔识别成瞳孔（代码内部已修复该漏洞，通过假设眼睛的位置一定在面部中上部，鼻孔的位置一定在面部中下部）。总的来说，对于一般照片的处理，还是很好用的。</p>]]></content>
      
      
      <categories>
          
          <category> 图像识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习入门(二)</title>
      <link href="/2020/06/01/machineLearning2/"/>
      <url>/2020/06/01/machineLearning2/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-Operations"><a href="#Basic-Operations" class="headerlink" title="Basic Operations"></a>Basic Operations</h1><p>下载好Octave后，打开命令行，尝试以下基本操作：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">octave:1&gt; 3+2</span><br><span class="line">ans &#x3D;  5</span><br><span class="line">octave:2&gt; 5-3</span><br><span class="line">ans &#x3D;  2</span><br><span class="line">octave:3&gt; 2^6</span><br><span class="line">ans &#x3D;  64</span><br><span class="line">octave:4&gt; 1&#x2F;2</span><br><span class="line">ans &#x3D;  0.50000</span><br><span class="line">octave:5&gt; 1 &#x3D;&#x3D; 2</span><br><span class="line">ans &#x3D; 0</span><br><span class="line">octave:6&gt; 1 &#x3D;&#x3D; 2 % false</span><br><span class="line">ans &#x3D; 0</span><br><span class="line">octave:7&gt; 1 ~&#x3D; 2</span><br><span class="line">ans &#x3D; 1</span><br><span class="line">octave:8&gt; 1 &amp;&amp; 0</span><br><span class="line">ans &#x3D; 0</span><br><span class="line">octave:9&gt; 1 || 0</span><br><span class="line">ans &#x3D; 1</span><br></pre></td></tr></table></figure><p>在Octave中，%后面接的是注释的内容，不等号由 ~= 表示，这是两处需要注意的地方。</p><h2 id="更改命令行命令头文字"><a href="#更改命令行命令头文字" class="headerlink" title="更改命令行命令头文字"></a>更改命令行命令头文字</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">octave:10&gt; PS1(&#39;&lt;&lt; &#39;)</span><br><span class="line">&lt;&lt;</span><br><span class="line">&lt;&lt;</span><br><span class="line">&lt;&lt; PS1(&#39;&gt;&gt; &#39;)</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a &#x3D; 3</span><br><span class="line">a &#x3D;  3</span><br><span class="line">&gt;&gt; a &#x3D; 3;</span><br><span class="line">&gt;&gt; b &#x3D; &#39;hi&#39;</span><br><span class="line">b &#x3D; hi</span><br><span class="line">&gt;&gt; a &#x3D; pi</span><br><span class="line">a &#x3D;  3.1416</span><br><span class="line">&gt;&gt; disp(a)</span><br><span class="line"> 3.1416</span><br><span class="line">&gt;&gt; disp(sprintf(&#39;2 decimals: %0.2f&#39;, a))</span><br><span class="line">2 decimals: 3.14</span><br><span class="line">&gt;&gt; disp(sprintf(&#39;6 decimals: %0.6f&#39;, a))</span><br><span class="line">6 decimals: 3.141593</span><br><span class="line">&gt;&gt; format long</span><br><span class="line">&gt;&gt; a</span><br><span class="line">a &#x3D;  3.141592653589793</span><br><span class="line">&gt;&gt; format short</span><br><span class="line">&gt;&gt; a</span><br><span class="line">a &#x3D;  3.1416</span><br></pre></td></tr></table></figure><ul><li><p>带分号的变量不会打印在控制台上</p></li><li><p>disp()的用法相当于打印到控制台</p></li><li><p>sprintf()用来生成字符串，生成字符串的格式与C语言类似</p></li><li><p>format用来控制精度</p></li></ul><h2 id="矩阵声明"><a href="#矩阵声明" class="headerlink" title="矩阵声明"></a>矩阵声明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A &#x3D; [1 2; 3 4; 5 6]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; [1 2 3]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; 1:6</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2   3   4   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; 1:0.5:3</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">    1.0000    1.5000    2.0000    2.5000    3.0000</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; ones(2, 3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   1   1</span><br><span class="line">   1   1   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; 3 * ones(2, 3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   3   3   3</span><br><span class="line">   3   3   3</span><br><span class="line"></span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt; A &#x3D; zeros(3,3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   0   0   0</span><br><span class="line">   0   0   0</span><br><span class="line">   0   0   0</span><br><span class="line"></span><br><span class="line">&gt;&gt; rand(3,3)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0.44001   0.94055   0.87625</span><br><span class="line">   0.74902   0.28898   0.33190</span><br><span class="line">   0.88373   0.28346   0.43358</span><br><span class="line"></span><br><span class="line">&gt;&gt; rand(3,3)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0.39839   0.49388   0.56247</span><br><span class="line">   0.39130   0.18804   0.22053</span><br><span class="line">   0.54527   0.62032   0.32115</span><br><span class="line"></span><br><span class="line">&gt;&gt; w &#x3D; randn(1,3)</span><br><span class="line">w &#x3D;</span><br><span class="line"></span><br><span class="line">  -0.29046   1.84450   1.48855</span><br><span class="line"></span><br><span class="line">&gt;&gt; eye(7)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">Diagonal Matrix</span><br><span class="line"></span><br><span class="line">   1   0   0   0   0   0   0</span><br><span class="line">   0   1   0   0   0   0   0</span><br><span class="line">   0   0   1   0   0   0   0</span><br><span class="line">   0   0   0   1   0   0   0</span><br><span class="line">   0   0   0   0   1   0   0</span><br><span class="line">   0   0   0   0   0   1   0</span><br><span class="line">   0   0   0   0   0   0   1</span><br></pre></td></tr></table></figure><h2 id="绘制命令"><a href="#绘制命令" class="headerlink" title="绘制命令"></a>绘制命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; w &#x3D; -6 + sqrt(10)*(randn(1,10000));</span><br><span class="line">&gt;&gt; hist(w)</span><br><span class="line">&gt;&gt; hist(w,100)</span><br></pre></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; help eye</span><br><span class="line">&#39;eye&#39; is a built-in function from the file libinterp&#x2F;corefcn&#x2F;data.cc</span><br><span class="line"></span><br><span class="line"> -- eye (N)</span><br><span class="line"> -- eye (M, N)</span><br><span class="line"> -- eye ([M N])</span><br><span class="line"> -- eye (..., CLASS)</span><br><span class="line">     Return an identity matrix.</span><br><span class="line"></span><br><span class="line">     If invoked with a single scalar argument N, return a square NxN</span><br><span class="line">     identity matrix.</span><br><span class="line"></span><br><span class="line">     If supplied two scalar arguments (M, N), &#39;eye&#39; takes them to be the</span><br><span class="line">     number of rows and columns.  If given a vector with two elements,</span><br><span class="line">     &#39;eye&#39; uses the values of the elements as the number of rows and</span><br><span class="line">     columns, respectively.  For example:</span><br><span class="line"></span><br><span class="line">          eye (3)</span><br><span class="line">           &#x3D;&gt;  1  0  0</span><br><span class="line">               0  1  0</span><br><span class="line">               0  0  1</span><br><span class="line"></span><br><span class="line">     The following expressions all produce the same result:</span><br><span class="line"></span><br><span class="line">          eye (2)</span><br><span class="line">          &#x3D;&#x3D;</span><br><span class="line">          eye (2, 2)</span><br><span class="line">          &#x3D;&#x3D;</span><br><span class="line">          eye (size ([1, 2; 3, 4]))</span><br><span class="line"></span><br><span class="line">     The optional argument CLASS, allows &#39;eye&#39; to return an array of the</span><br><span class="line">     specified type, like</span><br><span class="line"></span><br><span class="line">          val &#x3D; zeros (n,m, &quot;uint8&quot;)</span><br><span class="line"></span><br><span class="line">     Calling &#39;eye&#39; with no arguments is equivalent to calling it with an</span><br><span class="line">     argument of 1.  Any negative dimensions are treated as zero.  These</span><br><span class="line">     odd definitions are for compatibility with MATLAB.</span><br><span class="line"></span><br><span class="line">     See also: speye, ones, zeros.</span><br><span class="line"></span><br><span class="line">Additional help for built-in functions and operators is</span><br><span class="line">available in the online version of the manual.  Use the command</span><br><span class="line">&#39;doc &lt;topic&gt;&#39; to search the manual index.</span><br><span class="line"></span><br><span class="line">Help and information about Octave is also available on the WWW</span><br><span class="line">at https:&#x2F;&#x2F;www.octave.org and via the help@octave.org</span><br><span class="line">mailing list.</span><br></pre></td></tr></table></figure><h2 id="查询命令与清除命令"><a href="#查询命令与清除命令" class="headerlink" title="查询命令与清除命令"></a>查询命令与清除命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; who</span><br><span class="line">Variables in the current scope:</span><br><span class="line"></span><br><span class="line">A    a    ans  b    w</span><br><span class="line"></span><br><span class="line">&gt;&gt; whos</span><br><span class="line">Variables in the current scope:</span><br><span class="line"></span><br><span class="line">   Attr Name        Size                     Bytes  Class</span><br><span class="line">   &#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;        &#x3D;&#x3D;&#x3D;&#x3D;                     &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        A           3x3                         72  double</span><br><span class="line">        a           1x1                          8  double</span><br><span class="line">        ans         1x1                          8  double</span><br><span class="line">        b           1x2                          2  char</span><br><span class="line">        w           1x10000                  80000  double</span><br><span class="line"></span><br><span class="line">Total is 10013 elements using 80090 bytes</span><br><span class="line"></span><br><span class="line">&gt;&gt; clear A</span><br><span class="line">&gt;&gt; whos</span><br><span class="line">Variables in the current scope:</span><br><span class="line"></span><br><span class="line">   Attr Name        Size                     Bytes  Class</span><br><span class="line">   &#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;        &#x3D;&#x3D;&#x3D;&#x3D;                     &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        a           1x1                          8  double</span><br><span class="line">        ans         1x1                          8  double</span><br><span class="line">        b           1x2                          2  char</span><br><span class="line">        w           1x10000                  80000  double</span><br><span class="line"></span><br><span class="line">Total is 10004 elements using 80018 bytes</span><br><span class="line"></span><br><span class="line">&gt;&gt; clear</span><br><span class="line">&gt;&gt; whos</span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="向量相关的命令"><a href="#向量相关的命令" class="headerlink" title="向量相关的命令"></a>向量相关的命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A &#x3D; [1 2; 3 4; 5 6]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; size(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   3   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; sz &#x3D; size(A)</span><br><span class="line">sz &#x3D;</span><br><span class="line"></span><br><span class="line">   3   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; size(sz)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; v &#x3D; A(1:2)</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">   1   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; A(3,2)</span><br><span class="line">ans &#x3D;  6</span><br><span class="line">&gt;&gt; A(2,:)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   3   4</span><br><span class="line"></span><br><span class="line">&gt;&gt; A(:,1)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   3</span><br><span class="line">   5</span><br><span class="line"></span><br><span class="line">&gt;&gt; A(:)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   3</span><br><span class="line">   5</span><br><span class="line">   2</span><br><span class="line">   4</span><br><span class="line">   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A([1 3], :)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A(1,:)&#x3D;[2 3]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   2   3</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; [A [100 200 300]]</span><br><span class="line">error: horizontal dimensions mismatch (3x2 vs 1x3)</span><br><span class="line">&gt;&gt; A &#x3D; [A [100;200;300]]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">     2     3   100</span><br><span class="line">     3     4   200</span><br><span class="line">     5     6   300</span><br><span class="line"></span><br><span class="line">&gt;&gt; B &#x3D; [1 1 1;2 2 2;3 3 3]</span><br><span class="line">B &#x3D;</span><br><span class="line"></span><br><span class="line">   1   1   1</span><br><span class="line">   2   2   2</span><br><span class="line">   3   3   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; C &#x3D; [A B]</span><br><span class="line">C &#x3D;</span><br><span class="line"></span><br><span class="line">     2     3   100     1     1     1</span><br><span class="line">     3     4   200     2     2     2</span><br><span class="line">     5     6   300     3     3     3</span><br><span class="line"></span><br><span class="line">&gt;&gt; C &#x3D; [A;B]</span><br><span class="line">C &#x3D;</span><br><span class="line"></span><br><span class="line">     2     3   100</span><br><span class="line">     3     4   200</span><br><span class="line">     5     6   300</span><br><span class="line">     1     1     1</span><br><span class="line">     2     2     2</span><br><span class="line">     3     3     3</span><br></pre></td></tr></table></figure><h2 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; pwd</span><br><span class="line">ans &#x3D; C:\Users\12099</span><br><span class="line">&gt;&gt; ls</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 7AE6-0E73</span><br><span class="line"></span><br><span class="line"> C:\Users\12099 的目录</span><br><span class="line"></span><br><span class="line">[.]                                   [.ssh]                                [Links]</span><br><span class="line">[..]                                  [.tooling]                            [Music]</span><br><span class="line">[.android]                            .viminfo                              [Nox_share]</span><br><span class="line">[.AndroidStudio3.6]                   [.vscode]                             nuuid.ini</span><br><span class="line">[.astah]                              [.vue-cli-ui]                         [OneDrive]</span><br><span class="line">.bash_history                         .vuerc                                [Packet Tracer 5.2]</span><br><span class="line">[.BigNox]                             [.WebStorm2019.3]                     [Pictures]</span><br><span class="line">[.config]                             [3D Objects]                          [Postman]</span><br><span class="line">.gitconfig                            [ansel]                               [Saved Games]</span><br><span class="line">[.idlerc]                             [booksApi]                            [Searches]</span><br><span class="line">[.IntelliJIdea2019.3]                 [Contacts]                            [source]</span><br><span class="line">[.m2]                                 [Creative Cloud Files]                [try]</span><br><span class="line">[.matplotlib]                         d4ac4633ebd6440fa397b84f1bc94a3c.7z   useruid.ini</span><br><span class="line">[.mitmproxy]                          [Desktop]                             [Videos]</span><br><span class="line">.npmrc                                [Documents]                           [vmlogs]</span><br><span class="line">.octave_hist                          [Downloads]                           [WeChatProjects]</span><br><span class="line">.packettracer                         [Favorites]                           仙林校庆餐券设计.png</span><br><span class="line">[.PyCharmEdu2019.3]                   inittk.ini</span><br><span class="line">[.pylint.d]                           inst.ini</span><br><span class="line">              13 个文件        174,642 字节</span><br><span class="line">              42 个目录 13,781,233,664 可用字节</span><br><span class="line">&gt;&gt; cd desktop</span><br><span class="line">&gt;&gt; pwd</span><br><span class="line">ans &#x3D; C:\Users\12099\desktop</span><br><span class="line">&gt;&gt; load test.dat</span><br><span class="line">&gt;&gt; whos</span><br><span class="line">Variables in the current scope:</span><br><span class="line"></span><br><span class="line">   Attr Name        Size                     Bytes  Class</span><br><span class="line">   &#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;        &#x3D;&#x3D;&#x3D;&#x3D;                     &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        A           3x3                         72  double</span><br><span class="line">        B           3x3                         72  double</span><br><span class="line">        C           6x3                        144  double</span><br><span class="line">        ans         1x22                        22  char</span><br><span class="line">        sz          1x2                         16  double</span><br><span class="line">        test        9x2                        144  double</span><br><span class="line">        v           1x2                         16  double</span><br><span class="line"></span><br><span class="line">Total is 80 elements using 486 bytes</span><br><span class="line"></span><br><span class="line">&gt;&gt; test</span><br><span class="line">test &#x3D;</span><br><span class="line"></span><br><span class="line">   1000      1</span><br><span class="line">   2000      2</span><br><span class="line">   3000      3</span><br><span class="line">   4000      4</span><br><span class="line">   5000      5</span><br><span class="line">   6000      6</span><br><span class="line">   7000      7</span><br><span class="line">   8000      8</span><br><span class="line">   9000      9</span><br><span class="line"></span><br><span class="line">&gt;&gt; v &#x3D; [1 2 3 4 5]</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2   3   4   5</span><br><span class="line"></span><br><span class="line">&gt;&gt; save hello.mat v;</span><br><span class="line">&gt;&gt; clear</span><br><span class="line">&gt;&gt; load hello.mat</span><br><span class="line">&gt;&gt; whos</span><br><span class="line">Variables in the current scope:</span><br><span class="line"></span><br><span class="line">   Attr Name        Size                     Bytes  Class</span><br><span class="line">   &#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;        &#x3D;&#x3D;&#x3D;&#x3D;                     &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        v           1x5                         40  double</span><br><span class="line"></span><br><span class="line">Total is 5 elements using 40 bytes</span><br><span class="line"></span><br><span class="line">&gt;&gt; v</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2   3   4   5</span><br><span class="line"></span><br><span class="line">&gt;&gt; save hello.txt v -ascii</span><br><span class="line">&gt;&gt; load hello.txt</span><br><span class="line">&gt;&gt; clear</span><br><span class="line">&gt;&gt; load hello.txt</span><br><span class="line">&gt;&gt; whos</span><br><span class="line">Variables in the current scope:</span><br><span class="line"></span><br><span class="line">   Attr Name        Size                     Bytes  Class</span><br><span class="line">   &#x3D;&#x3D;&#x3D;&#x3D; &#x3D;&#x3D;&#x3D;&#x3D;        &#x3D;&#x3D;&#x3D;&#x3D;                     &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">        hello       1x5                         40  double</span><br><span class="line"></span><br><span class="line">Total is 5 elements using 40 bytes</span><br><span class="line"></span><br><span class="line">&gt;&gt; hello</span><br><span class="line">hello &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2   3   4   5</span><br></pre></td></tr></table></figure><h2 id="矩阵计算更复杂的命令"><a href="#矩阵计算更复杂的命令" class="headerlink" title="矩阵计算更复杂的命令"></a>矩阵计算更复杂的命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A &#x3D; [1 2; 3 4; 5 6]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; B &#x3D; [1 2; 3 4]</span><br><span class="line">B &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line"></span><br><span class="line">&gt;&gt; A * B</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">    7   10</span><br><span class="line">   15   22</span><br><span class="line">   23   34</span><br><span class="line"></span><br><span class="line">&gt;&gt; C &#x3D; [2 3; 4 5; 6 7]</span><br><span class="line">C &#x3D;</span><br><span class="line"></span><br><span class="line">   2   3</span><br><span class="line">   4   5</span><br><span class="line">   6   7</span><br><span class="line"></span><br><span class="line">&gt;&gt; A .* C</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">    2    6</span><br><span class="line">   12   20</span><br><span class="line">   30   42</span><br><span class="line"></span><br><span class="line">&gt;&gt; A .* B</span><br><span class="line">error: product: nonconformant arguments (op1 is 3x2, op2 is 2x2)</span><br><span class="line">&gt;&gt; A</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A .^ 2</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">    1    4</span><br><span class="line">    9   16</span><br><span class="line">   25   36</span><br><span class="line"></span><br><span class="line">&gt;&gt; v &#x3D; [1; 2; 3]</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; 1 .&#x2F; v</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1.00000</span><br><span class="line">   0.50000</span><br><span class="line">   0.33333</span><br><span class="line"></span><br><span class="line">&gt;&gt; 1 .&#x2F; A</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1.00000   0.50000</span><br><span class="line">   0.33333   0.25000</span><br><span class="line">   0.20000   0.16667</span><br><span class="line"></span><br><span class="line">&gt;&gt; log(v)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0.00000</span><br><span class="line">   0.69315</span><br><span class="line">   1.09861</span><br><span class="line"></span><br><span class="line">&gt;&gt; log(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0.00000   0.69315</span><br><span class="line">   1.09861   1.38629</span><br><span class="line">   1.60944   1.79176</span><br><span class="line"></span><br><span class="line">&gt;&gt; exp(v)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">    2.7183</span><br><span class="line">    7.3891</span><br><span class="line">   20.0855</span><br><span class="line"></span><br><span class="line">&gt;&gt; v &#x3D; [-1; -2; -3]</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">  -1</span><br><span class="line">  -2</span><br><span class="line">  -3</span><br><span class="line"></span><br><span class="line">&gt;&gt; abs(v)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; v</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">  -1</span><br><span class="line">  -2</span><br><span class="line">  -3</span><br><span class="line"></span><br><span class="line">&gt;&gt; -v</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; length(v)</span><br><span class="line">ans &#x3D;  3</span><br><span class="line">&gt;&gt; v + ones(length(v), 1)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0</span><br><span class="line">  -1</span><br><span class="line">  -2</span><br><span class="line"></span><br><span class="line">&gt;&gt; v</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">  -1</span><br><span class="line">  -2</span><br><span class="line">  -3</span><br><span class="line"></span><br><span class="line">&gt;&gt; v + 1</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0</span><br><span class="line">  -1</span><br><span class="line">  -2</span><br><span class="line"></span><br><span class="line">&gt;&gt; v + 2</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   0</span><br><span class="line">  -1</span><br><span class="line"></span><br><span class="line">&gt;&gt; A</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A&#39;</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1   3   5</span><br><span class="line">   2   4   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; (A&#39;)&#39;</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; a &#x3D; [1 2 100 -2]</span><br><span class="line">a &#x3D;</span><br><span class="line"></span><br><span class="line">     1     2   100    -2</span><br><span class="line"></span><br><span class="line">&gt;&gt; val &#x3D; max(a)</span><br><span class="line">val &#x3D;  100</span><br><span class="line">&gt;&gt; [val, ind] &#x3D; max(a)</span><br><span class="line">val &#x3D;  100</span><br><span class="line">ind &#x3D;  3</span><br><span class="line">&gt;&gt; A</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; [1 6; 2 5; 3 4]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   6</span><br><span class="line">   2   5</span><br><span class="line">   3   4</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   3   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; a</span><br><span class="line">a &#x3D;</span><br><span class="line"></span><br><span class="line">     1     2   100    -2</span><br><span class="line"></span><br><span class="line">&gt;&gt; a &lt; 3</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">  1  1  0  1</span><br><span class="line"></span><br><span class="line">&gt;&gt; find(a &lt; 3)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2   4</span><br><span class="line"></span><br><span class="line">&gt;&gt; help magic</span><br><span class="line">&#39;magic&#39; is a function from the file S:\Octave-5.2.0\mingw64\share\octave\5.2.0\m\special-matrix\magic.m</span><br><span class="line"></span><br><span class="line"> -- magic (N)</span><br><span class="line"></span><br><span class="line">     Create an N-by-N magic square.</span><br><span class="line"></span><br><span class="line">     A magic square is an arrangement of the integers &#39;1:n^2&#39; such that</span><br><span class="line">     the row sums, column sums, and diagonal sums are all equal to the</span><br><span class="line">     same value.</span><br><span class="line"></span><br><span class="line">     Note: N must be a scalar greater than or equal to 3.  If you supply</span><br><span class="line">     N less than 3, magic returns either a nonmagic square, or else the</span><br><span class="line">     degenerate magic squares 1 and [].</span><br><span class="line"></span><br><span class="line">Additional help for built-in functions and operators is</span><br><span class="line">available in the online version of the manual.  Use the command</span><br><span class="line">&#39;doc &lt;topic&gt;&#39; to search the manual index.</span><br><span class="line"></span><br><span class="line">Help and information about Octave is also available on the WWW</span><br><span class="line">at https:&#x2F;&#x2F;www.octave.org and via the help@octave.org</span><br><span class="line">mailing list.</span><br><span class="line">&gt;&gt; A &#x3D; magic(3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   8   1   6</span><br><span class="line">   3   5   7</span><br><span class="line">   4   9   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; [r c] &#x3D; find(A &gt;&#x3D; 7)</span><br><span class="line">r &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   3</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">c &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; a</span><br><span class="line">a &#x3D;</span><br><span class="line"></span><br><span class="line">     1     2   100    -2</span><br><span class="line"></span><br><span class="line">&gt;&gt; sum(a)</span><br><span class="line">ans &#x3D;  101</span><br><span class="line">&gt;&gt; prod(a)</span><br><span class="line">ans &#x3D; -400</span><br><span class="line">&gt;&gt; a &#x3D; [10.1 2 3.5 6]</span><br><span class="line">a &#x3D;</span><br><span class="line"></span><br><span class="line">   10.1000    2.0000    3.5000    6.0000</span><br><span class="line"></span><br><span class="line">&gt;&gt; floor(a)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   10    2    3    6</span><br><span class="line"></span><br><span class="line">&gt;&gt; ceil(a)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   11    2    4    6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; [1 2; 3 4; 5 6]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; B &#x3D; [2 3; 1 2; 6 7]</span><br><span class="line">B &#x3D;</span><br><span class="line"></span><br><span class="line">   2   3</span><br><span class="line">   1   2</span><br><span class="line">   6   7</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A,B)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   2   3</span><br><span class="line">   3   4</span><br><span class="line">   6   7</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(rand(3),rand(3))</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0.79508   0.35267   0.90174</span><br><span class="line">   0.66504   0.23314   0.89966</span><br><span class="line">   0.85890   0.94603   0.60221</span><br><span class="line"></span><br><span class="line">&gt;&gt; A</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   2</span><br><span class="line">   3   4</span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A,[],1)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   5   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A,[],2)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   2</span><br><span class="line">   4</span><br><span class="line">   6</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; [1 3; 2 1; 3 5]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   3</span><br><span class="line">   2   1</span><br><span class="line">   3   5</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; [1 5; 2 1; 3 2]</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   5</span><br><span class="line">   2   1</span><br><span class="line">   3   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A,[],1)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   3   5</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A,[],2)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   5</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; A</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   1   5</span><br><span class="line">   2   1</span><br><span class="line">   3   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   3   5</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(max(A))</span><br><span class="line">ans &#x3D;  5</span><br><span class="line">&gt;&gt; A(:)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line">   5</span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; max(A(:))</span><br><span class="line">ans &#x3D;  5</span><br><span class="line">&gt;&gt; A &#x3D; magic(9)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   47   58   69   80    1   12   23   34   45</span><br><span class="line">   57   68   79    9   11   22   33   44   46</span><br><span class="line">   67   78    8   10   21   32   43   54   56</span><br><span class="line">   77    7   18   20   31   42   53   55   66</span><br><span class="line">    6   17   19   30   41   52   63   65   76</span><br><span class="line">   16   27   29   40   51   62   64   75    5</span><br><span class="line">   26   28   39   50   61   72   74    4   15</span><br><span class="line">   36   38   49   60   71   73    3   14   25</span><br><span class="line">   37   48   59   70   81    2   13   24   35</span><br><span class="line"></span><br><span class="line">&gt;&gt; sum(A,1)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   369   369   369   369   369   369   369   369   369</span><br><span class="line"></span><br><span class="line">&gt;&gt; sum(A,2)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line">   369</span><br><span class="line"></span><br><span class="line">&gt;&gt; eye(9)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">Diagonal Matrix</span><br><span class="line"></span><br><span class="line">   1   0   0   0   0   0   0   0   0</span><br><span class="line">   0   1   0   0   0   0   0   0   0</span><br><span class="line">   0   0   1   0   0   0   0   0   0</span><br><span class="line">   0   0   0   1   0   0   0   0   0</span><br><span class="line">   0   0   0   0   1   0   0   0   0</span><br><span class="line">   0   0   0   0   0   1   0   0   0</span><br><span class="line">   0   0   0   0   0   0   1   0   0</span><br><span class="line">   0   0   0   0   0   0   0   1   0</span><br><span class="line">   0   0   0   0   0   0   0   0   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; A .* eye(9)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   47    0    0    0    0    0    0    0    0</span><br><span class="line">    0   68    0    0    0    0    0    0    0</span><br><span class="line">    0    0    8    0    0    0    0    0    0</span><br><span class="line">    0    0    0   20    0    0    0    0    0</span><br><span class="line">    0    0    0    0   41    0    0    0    0</span><br><span class="line">    0    0    0    0    0   62    0    0    0</span><br><span class="line">    0    0    0    0    0    0   74    0    0</span><br><span class="line">    0    0    0    0    0    0    0   14    0</span><br><span class="line">    0    0    0    0    0    0    0    0   35</span><br><span class="line"></span><br><span class="line">&gt;&gt; flipud(eye(9))</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">Permutation Matrix</span><br><span class="line"></span><br><span class="line">   0   0   0   0   0   0   0   0   1</span><br><span class="line">   0   0   0   0   0   0   0   1   0</span><br><span class="line">   0   0   0   0   0   0   1   0   0</span><br><span class="line">   0   0   0   0   0   1   0   0   0</span><br><span class="line">   0   0   0   0   1   0   0   0   0</span><br><span class="line">   0   0   0   1   0   0   0   0   0</span><br><span class="line">   0   0   1   0   0   0   0   0   0</span><br><span class="line">   0   1   0   0   0   0   0   0   0</span><br><span class="line">   1   0   0   0   0   0   0   0   0</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; magic(3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   8   1   6</span><br><span class="line">   3   5   7</span><br><span class="line">   4   9   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; pinv(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   0.147222  -0.144444   0.063889</span><br><span class="line">  -0.061111   0.022222   0.105556</span><br><span class="line">  -0.019444   0.188889  -0.102778</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; eye(3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">Diagonal Matrix</span><br><span class="line"></span><br><span class="line">   1   0   0</span><br><span class="line">   0   1   0</span><br><span class="line">   0   0   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; pinv(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">Diagonal Matrix</span><br><span class="line"></span><br><span class="line">   1   0   0</span><br><span class="line">   0   1   0</span><br><span class="line">   0   0   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; pinv(A) % the reverse of A</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">Diagonal Matrix</span><br><span class="line"></span><br><span class="line">   1   0   0</span><br><span class="line">   0   1   0</span><br><span class="line">   0   0   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; A * pinv(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">Diagonal Matrix</span><br><span class="line"></span><br><span class="line">   1   0   0</span><br><span class="line">   0   1   0</span><br><span class="line">   0   0   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; A &#x3D; magic(3)</span><br><span class="line">A &#x3D;</span><br><span class="line"></span><br><span class="line">   8   1   6</span><br><span class="line">   3   5   7</span><br><span class="line">   4   9   2</span><br><span class="line"></span><br><span class="line">&gt;&gt; A * pinv(A)</span><br><span class="line">ans &#x3D;</span><br><span class="line"></span><br><span class="line">   1.0000e+00  -1.2157e-14   6.3560e-15</span><br><span class="line">   5.5511e-17   1.0000e+00  -1.5266e-16</span><br><span class="line">  -5.9813e-15   1.2268e-14   1.0000e+00</span><br></pre></td></tr></table></figure><h2 id="数据可视化命令"><a href="#数据可视化命令" class="headerlink" title="数据可视化命令"></a>数据可视化命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; t &#x3D; [0:0.01:0.98];</span><br><span class="line">&gt;&gt; y1 &#x3D; sin(2*pi*4*t);</span><br><span class="line">&gt;&gt; plot(t,y1);</span><br></pre></td></tr></table></figure><p>该命令可以将正弦函数可视化。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; t &#x3D; [0:0.01:0.98];</span><br><span class="line">&gt;&gt; y1 &#x3D; sin(2*pi*4*t);</span><br><span class="line">&gt;&gt; y2 &#x3D; cos(2*pi*4*t);</span><br><span class="line">&gt;&gt; hold on;</span><br><span class="line">&gt;&gt; plot(t, y1);</span><br><span class="line">&gt;&gt; hold on;</span><br><span class="line">&gt;&gt; plot(t, y2);</span><br></pre></td></tr></table></figure><p>该命令可以将正弦函数和余弦函数绘制在同一个坐标轴上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; plot(t, y1, &#39;r&#39;);</span><br></pre></td></tr></table></figure><p>该命令可以将正弦函数以红色的形式显示在坐标轴上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; plot(t, y1);</span><br><span class="line">&gt;&gt; hold on;</span><br><span class="line">&gt;&gt; plot(t, y2, &#39;r&#39;);</span><br><span class="line">&gt;&gt; xlabel(&#39;time&#39;);</span><br><span class="line">&gt;&gt; ylabel(&#39;value&#39;);</span><br></pre></td></tr></table></figure><p>该命令可以给坐标轴的横轴和纵轴取名字。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; legend(&#39;sin&#39;, &#39;cos&#39;);</span><br></pre></td></tr></table></figure><p>该命令可以给坐标轴加上图例。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; title(&#39;my plot&#39;);</span><br></pre></td></tr></table></figure><p>该命令可以给绘制的图像取一个标题。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; pwd</span><br><span class="line">ans &#x3D; C:\Users\12099\desktop</span><br><span class="line">&gt;&gt; print -dpng &#39;myPlot.png&#39;</span><br></pre></td></tr></table></figure><p>该命令可以将刚才绘制的图像以png的格式保存。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; figure(1);</span><br><span class="line">&gt;&gt; plot(t, y1);</span><br><span class="line">&gt;&gt; figure(2);</span><br><span class="line">&gt;&gt; plot(t, y2);</span><br></pre></td></tr></table></figure><p>该命令可以将两幅图片编号为1和2，然后同时显示到桌面上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; subplot(1,2,1);</span><br><span class="line">&gt;&gt; plot(t,y1);</span><br><span class="line">&gt;&gt; subplot(1,2,2);</span><br><span class="line">&gt;&gt; plot(t,y2);</span><br></pre></td></tr></table></figure><p>该命令可以将一个窗口分成1*2的网格，并将两个函数图像同时打印到窗口中。</p><h2 id="if与for的使用"><a href="#if与for的使用" class="headerlink" title="if与for的使用"></a>if与for的使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; v &#x3D; zeros(10,1)</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line"></span><br><span class="line">&gt;&gt; for i &#x3D; 1:10,</span><br><span class="line">&gt;    v(i) &#x3D; 2^i;</span><br><span class="line">&gt;  end;</span><br><span class="line">&gt;&gt; v</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">      2</span><br><span class="line">      4</span><br><span class="line">      8</span><br><span class="line">     16</span><br><span class="line">     32</span><br><span class="line">     64</span><br><span class="line">    128</span><br><span class="line">    256</span><br><span class="line">    512</span><br><span class="line">   1024</span><br><span class="line"></span><br><span class="line">&gt;&gt; indices &#x3D; 1:10</span><br><span class="line">indices &#x3D;</span><br><span class="line"></span><br><span class="line">    1    2    3    4    5    6    7    8    9   10</span><br><span class="line"></span><br><span class="line">&gt;&gt; for i &#x3D; indices,</span><br><span class="line">&gt;    disp(i);</span><br><span class="line">&gt; end;</span><br><span class="line"> 1</span><br><span class="line"> 2</span><br><span class="line"> 3</span><br><span class="line"> 4</span><br><span class="line"> 5</span><br><span class="line"> 6</span><br><span class="line"> 7</span><br><span class="line"> 8</span><br><span class="line"> 9</span><br><span class="line"> 10</span><br><span class="line">&gt;&gt; i &#x3D; 1;</span><br><span class="line">&gt;&gt; while i &lt;&#x3D; 5,</span><br><span class="line">&gt;    v(i) &#x3D; 100;</span><br><span class="line">&gt;    i &#x3D; i + 1;</span><br><span class="line">&gt; end;</span><br><span class="line">&gt;&gt; v</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">    100</span><br><span class="line">    100</span><br><span class="line">    100</span><br><span class="line">    100</span><br><span class="line">    100</span><br><span class="line">     64</span><br><span class="line">    128</span><br><span class="line">    256</span><br><span class="line">    512</span><br><span class="line">   1024</span><br><span class="line"></span><br><span class="line">&gt;&gt; i &#x3D; 1;</span><br><span class="line">&gt;&gt; while true,</span><br><span class="line">&gt;    v(i) &#x3D; 999;</span><br><span class="line">&gt;    i &#x3D; i + 1;</span><br><span class="line">&gt;    if i &#x3D;&#x3D; 6,</span><br><span class="line">&gt;      break;</span><br><span class="line">&gt;    end;</span><br><span class="line">&gt;  end;</span><br><span class="line">&gt;&gt; v</span><br><span class="line">v &#x3D;</span><br><span class="line"></span><br><span class="line">    999</span><br><span class="line">    999</span><br><span class="line">    999</span><br><span class="line">    999</span><br><span class="line">    999</span><br><span class="line">     64</span><br><span class="line">    128</span><br><span class="line">    256</span><br><span class="line">    512</span><br><span class="line">   1024</span><br><span class="line"></span><br><span class="line">&gt;&gt; v(1) &#x3D; 2;</span><br><span class="line">&gt;&gt; if v(1) &#x3D;&#x3D; 1,</span><br><span class="line">&gt;    disp(&#39;The value is one&#39;);</span><br><span class="line">&gt;  elseif v(1) &#x3D;&#x3D; 2,</span><br><span class="line">&gt;    disp(&#39;The value is two&#39;);</span><br><span class="line">&gt;  else,</span><br><span class="line">&gt;    disp(&#39;The value is not one or two&#39;);</span><br><span class="line">&gt;  end;</span><br><span class="line">The value is two</span><br></pre></td></tr></table></figure><h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>Octave的函数调用比较特殊，我们需要现在指定路径（比如桌面）新建一个.m后缀名的文件，然后在该文件中编辑函数（新建m文件后，Octave会自动识别，打开后显示的是Octave代码编辑器）。</p><p>比如，我们新建一个squareThisNumber.m的文件，并写入如下内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function y &#x3D; squareThisNumber(x)</span><br><span class="line">y &#x3D; x^2</span><br></pre></td></tr></table></figure><p>当然此处函数写法有很多种，我试过的有不加y，直接输出x^2的也能成功返回，原编辑器会在结尾默认添加end function，删去也不影响返回。</p><p>然后我们回到命令行中，调用此函数，注意路径的添加或变更：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; pwd</span><br><span class="line">ans &#x3D; C:\Users\12099</span><br><span class="line">&gt;&gt; addpath(&#39;C:\Users\12099\desktop&#39;);</span><br><span class="line">&gt;&gt; squareThisNumber(5)</span><br><span class="line">y &#x3D;  25</span><br><span class="line">ans &#x3D;  25</span><br></pre></td></tr></table></figure><p>Octave函数不止可以返回一个值，也可以返回多个值，类似于返回一个数组：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function [y1, y2] &#x3D; squareThisNumber(x)</span><br><span class="line">y1 &#x3D; x^2</span><br><span class="line">y2 &#x3D; x^3</span><br></pre></td></tr></table></figure><p>我们回到命令行中，对其检验：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; [a, b] &#x3D; squareThisNumber(5);</span><br><span class="line">y1 &#x3D;  25</span><br><span class="line">y2 &#x3D;  125</span><br><span class="line">&gt;&gt; a</span><br><span class="line">a &#x3D;  25</span><br><span class="line">&gt;&gt; b</span><br><span class="line">b &#x3D;  125</span><br></pre></td></tr></table></figure><h2 id="J-cost-function的编辑"><a href="#J-cost-function的编辑" class="headerlink" title="J cost function的编辑"></a>J cost function的编辑</h2><p>前文所述的代价函数编辑如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function J &#x3D; costfunctionJ(X, y, theta)</span><br><span class="line"></span><br><span class="line">% X is the &quot;design matrix&quot; containing our training examples</span><br><span class="line">% y is the class labels</span><br><span class="line"></span><br><span class="line">m &#x3D; size(X, 1);               % number of training examples</span><br><span class="line">predictions &#x3D; X * theta;      % predictions of hypothesis on all m examples</span><br><span class="line">sqrErrors &#x3D; (predictions - y) .^ 2;   % squared errors</span><br><span class="line"></span><br><span class="line">J &#x3D; 1 &#x2F; (2 * m) * sum(sqrErrors);</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure><p>回到命令行进行测试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt; X &#x3D; [1 1; 1 2; 1 3]</span><br><span class="line">X &#x3D;</span><br><span class="line"></span><br><span class="line">   1   1</span><br><span class="line">   1   2</span><br><span class="line">   1   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; y &#x3D; [1; 2; 3]</span><br><span class="line">y &#x3D;</span><br><span class="line"></span><br><span class="line">   1</span><br><span class="line">   2</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">&gt;&gt; theta &#x3D; [0; 1]</span><br><span class="line">theta &#x3D;</span><br><span class="line"></span><br><span class="line">   0</span><br><span class="line">   1</span><br><span class="line"></span><br><span class="line">&gt;&gt; j &#x3D; costFunctionJ(X, y, theta)</span><br><span class="line">j &#x3D; 0</span><br><span class="line">&gt;&gt; theta &#x3D; [0; 0]</span><br><span class="line">theta &#x3D;</span><br><span class="line"></span><br><span class="line">   0</span><br><span class="line">   0</span><br><span class="line"></span><br><span class="line">&gt;&gt; j &#x3D; costFunctionJ(X, y, theta)</span><br><span class="line">j &#x3D;  2.3333</span><br></pre></td></tr></table></figure><h2 id="Vectorization-向量化思想"><a href="#Vectorization-向量化思想" class="headerlink" title="Vectorization(向量化思想)"></a>Vectorization(向量化思想)</h2><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%89%B9%E6%B3%A8%202020-06-02%20100024.png"  alt=""></p><p>对于上述式子，我们有两种基本的编程思路，其中第一种是传统思路，第二种是我们推荐的向量化思路：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prediction &#x3D; 0.0;</span><br><span class="line">for j &#x3D; 1:n+1,</span><br><span class="line">  prediction &#x3D; prediction + theta(j) * x(j)</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prediction &#x3D; theta&#39; * x;</span><br></pre></td></tr></table></figure><p>而这样的思想也同样可以应用于C++代码中，如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> prediction = theta.transpose() * x</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用C++输入场景</title>
      <link href="/2020/05/12/C++io/"/>
      <url>/2020/05/12/C++io/</url>
      
        <content type="html"><![CDATA[<p>下面是几种常见的C++输入情景以及对应的代码。为方便使用，先给出需要的类库。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="场景1：ungetc的输入处理方法"><a href="#场景1：ungetc的输入处理方法" class="headerlink" title="场景1：ungetc的输入处理方法"></a>场景1：ungetc的输入处理方法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; elemVec;</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">'&#125;'</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ch != <span class="string">'&#123;'</span> &amp;&amp; ch != <span class="string">','</span>) &#123;</span><br><span class="line"></span><br><span class="line">ungetc(ch, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">elemVec.push_back(temp);</span><br><span class="line">&#125;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elemVec.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; elemVec[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景2：带空行的不定行输入"><a href="#场景2：带空行的不定行输入" class="headerlink" title="场景2：带空行的不定行输入"></a>场景2：带空行的不定行输入</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strVec;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch != EOF) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="string">' '</span> &amp;&amp; ch != <span class="string">'\n'</span>) &#123;</span><br><span class="line"></span><br><span class="line">ungetc(ch, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">strVec.push_back(str);</span><br><span class="line">&#125;</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strVec.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strVec[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景3：逗号分割的字符串数组"><a href="#场景3：逗号分割的字符串数组" class="headerlink" title="场景3：逗号分割的字符串数组"></a>场景3：逗号分割的字符串数组</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">getline(<span class="built_in">cin</span>, str);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span>::iterator iter = str.<span class="built_in">begin</span>(); iter != str.<span class="built_in">end</span>();) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (*iter == <span class="string">'['</span> || *iter == <span class="string">']'</span> || *iter == <span class="string">'\"'</span>) &#123;</span><br><span class="line"></span><br><span class="line">iter = str.erase(iter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">++iter;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strVec;</span><br><span class="line"><span class="function"><span class="built_in">istringstream</span> <span class="title">ss</span><span class="params">(str)</span></span>;</span><br><span class="line"><span class="built_in">string</span> token;</span><br><span class="line"><span class="keyword">while</span> (getline(ss, token, <span class="string">','</span>)) &#123;</span><br><span class="line"></span><br><span class="line">strVec.push_back(token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strVec.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; strVec[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫入门</title>
      <link href="/2020/04/29/crawler/"/>
      <url>/2020/04/29/crawler/</url>
      
        <content type="html"><![CDATA[<p>学习爬虫的契机是小程序后端开发拟用这样的技术，我在这里简单整理一些爬虫的使用方法，方便以后使用的时候查阅。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>python环境配置</li><li>pycharm IDE</li><li>requests库的安装</li></ul><h2 id="Requests库的安装"><a href="#Requests库的安装" class="headerlink" title="Requests库的安装"></a>Requests库的安装</h2><p>&emsp;&emsp;以管理员的身份运行命令行，输入命令：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后进入IDE通过简单的代码验证requests是否安装成功（这里我们打开的是IDE中的python console进行模拟运行）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span>  // 出现<span class="number">200</span>代表连接成功</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line">(此处应显示百度的网页内容)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过这样简单的验证，我们的requests库就安装成功了。</p><blockquote><p>当我们使用pycharm作为网络爬虫的IDE时，有时我们把r.encoding设置成utf-8后，依然出现乱码，这个时候我们要打开pycharm的File-&gt;Settings-&gt;Editor-&gt;File Encodings，更改Global Encoding和Project Encoding为utf-8，并在Path中添加当前py文件，设置编码为utf-8，修改Default encoding for properties files为utf-8，此时便可以解决我们的乱码问题。</p></blockquote><h2 id="Requests库的get-方法"><a href="#Requests库的get-方法" class="headerlink" title="Requests库的get()方法"></a>Requests库的get()方法</h2><p>&emsp;&emsp;下面我们来分析前面一段给出的代码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = requests.get(url)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;此处的requests.get(url)相当于我们创建了一个Requests对象，r相当于创建了一个Response对象，get方法用来对应HTML的get。</p><p>&emsp;&emsp;Response对象有如下常用属性：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r.status_code:       HTTP请求的返回状态，200表示连接成功，404表示失败</span><br><span class="line">r.text:              HTTP相应内容的字符串形式，即url对应的页面内容</span><br><span class="line">r.encoding:          从HTTP header中猜测的响应内容编码方式</span><br><span class="line">r.apparent_encoding: 从内容中分析出的响应内容编码方式（备选编码方式）</span><br><span class="line">r.content:           HTTP响应内容的二进制形式</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;注意，如果header中不存在charset，则认为编码为ISO-8859-1，所以我们常常需要更改r.encoding，来使我们得到的内容中的汉字得到正确的编码。</p><h2 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h2><p>&emsp;&emsp;首先，我们要理解Requests库的异常：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requests.ConnectionError:  网络连接错误异常，如DNS查询失败、拒绝连接等</span><br><span class="line">requests.HTTPError:        HTTP错误异常</span><br><span class="line">requests.URLRequired:      URL缺失异常</span><br><span class="line">requests.TooManyRedirects: 超过最大重定向次数，产生重定向异常</span><br><span class="line">requests.ConnectTimeout:   连接远程服务器超时异常</span><br><span class="line">requests.Timeout:          请求URL超时，产生超时异常</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接着，我们要理解Response库的异常：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r.raise_for_status(): 如果不是200，产生异常requests.HTTPError</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面我们给出爬取网页的通用代码框架：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout = <span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h2 id="Requests库的主要方法"><a href="#Requests库的主要方法" class="headerlink" title="Requests库的主要方法"></a>Requests库的主要方法</h2><p>&emsp;&emsp;Requests库有7个主要方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">requests.request(): 构造一个请求，支撑以下各方法的基础方法</span><br><span class="line">requests.get():     获取HTML网页的主要方法，对应于HTTP的GET</span><br><span class="line">requests.head():    获取HTML网页头信息的方法，对应于HTTP的HEAD</span><br><span class="line">requests.post():    向HTML网页提交POST请求的方法，对应于HTTP的POST</span><br><span class="line">requests.put():     向HTML网页提交PUT请求的方法，对应于HTTP的PUT</span><br><span class="line">requests.patch():   向HTML网页提交局部修改请求，对应于HTTP的PATCH</span><br><span class="line">requests.delete():  向HTML页面提交删除请求，对应于HTTP的DELETE</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对应的HTTP协议对资源有6种操作：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET:    请求获取URL位置的资源</span><br><span class="line">HEAD:   请求获取URL位置资源的响应消息报告，即获得该资源的头部信息</span><br><span class="line">POST:   请求向URL位置的资源后附加新的数据</span><br><span class="line">PUT:    请求向URL位置存储一个资源，覆盖原URL位置的资源</span><br><span class="line">PATCH:  请求局部更新URL位置的资源，即改变该处资源的部分内容</span><br><span class="line">DELETE: 请求删除URL位置存储的资源</span><br></pre></td></tr></table></figure><h2 id="Requests库主要方法解析"><a href="#Requests库主要方法解析" class="headerlink" title="Requests库主要方法解析"></a>Requests库主要方法解析</h2><p>&emsp;&emsp;<strong>requests.request(method, url, **kwargs)</strong></p><p>&emsp;&emsp;**kwargs: 控制访问的参数，均为可选项</p><p>&emsp;&emsp;  params: 字典或字节序列，作为参数增加到url中</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>, <span class="string">'http://python123.io/ws'</span>, params=kv)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.url)</span><br><span class="line">http://python123.io/ws?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;data: 字典、字节序列或文件对象，作为Request的内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, data=kv)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>body = <span class="string">'主体内容'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, data=body)</span><br></pre></td></tr></table></figure><blockquote><p>此时，kv的内容不会加到url里，而是会加到url对应链接的内容中。</p></blockquote><p>&emsp;&emsp;json: JSON格式的数据，作为Request的内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>kv = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, json=kv)</span><br></pre></td></tr></table></figure><blockquote><p>此时，kv的内容会加到url对应的json文件中</p></blockquote><p>&emsp;&emsp;headers: 字典，HTTP定制头</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hd = &#123;<span class="string">'user-agent'</span>: <span class="string">'Chrome/10'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, headers=hd)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;cookies: 字典或CookieJar，Request中的cookie</p><p>&emsp;&emsp;auth: 元组，支持HTTP认证功能</p><p>&emsp;&emsp;files: 字典类型，传输文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fs = &#123;<span class="string">'file'</span>: open(<span class="string">'data.xls'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'POST'</span>, <span class="string">'http://python123.io/ws'</span>, files=fs)</span><br></pre></td></tr></table></figure><blockquote><p>用于向url对应的链接提供文件</p></blockquote><p>&emsp;&emsp;timeout: 设定超时时间，秒为单位</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>, <span class="string">'http://www.baidu.com'</span>, timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;proxies: 字典认证，设定访问代理服务器，可以增加登录认证</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pxs = &#123;<span class="string">'http'</span>: <span class="string">'http://user:pass@10.10.1:1234'</span></span><br><span class="line">           <span class="string">'https'</span>: <span class="string">'https://10.10.10.1:4321'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.request(<span class="string">'GET'</span>, <span class="string">'http://www.baidu.com'</span>, proxies=pxs)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;allow_redirects: True/False，默认为True，重定向开关</p><p>&emsp;&emsp;stream: True/False，默认为True，获取内容立即下载开关</p><p>&emsp;&emsp;verify: True/False，默认为True，认证SSL证书开关</p><p>&emsp;&emsp;cert: 本地SSL证书路径</p><h2 id="网络爬虫引发的问题"><a href="#网络爬虫引发的问题" class="headerlink" title="网络爬虫引发的问题"></a>网络爬虫引发的问题</h2><h3 id="网络爬虫的尺寸"><a href="#网络爬虫的尺寸" class="headerlink" title="网络爬虫的尺寸"></a>网络爬虫的尺寸</h3><ul><li><p>爬取网页，玩转网页：小规模，数据量小，爬取速度不敏感（Requests库）</p></li><li><p>爬取网站，爬取系列网站：中规模，数据规模较大，爬取速度敏感（Scrapy库）</p></li><li><p>爬取全网： 大规模，搜索引擎，爬取速度关键（定制开发）</p></li></ul><h3 id="网络爬虫引发的问题-1"><a href="#网络爬虫引发的问题-1" class="headerlink" title="网络爬虫引发的问题"></a>网络爬虫引发的问题</h3><ul><li><p>骚扰问题</p></li><li><p>法律风险</p></li><li><p>隐私泄露</p></li></ul><h3 id="网络爬虫的限制"><a href="#网络爬虫的限制" class="headerlink" title="网络爬虫的限制"></a>网络爬虫的限制</h3><h4 id="来源审查：判断User-Agent进行限制"><a href="#来源审查：判断User-Agent进行限制" class="headerlink" title="来源审查：判断User-Agent进行限制"></a>来源审查：判断User-Agent进行限制</h4><ul><li>检查来访HTTP协议头的User-Agent域，只响应浏览器或友好爬虫的访问</li></ul><h4 id="发布公告：Robots协议"><a href="#发布公告：Robots协议" class="headerlink" title="发布公告：Robots协议"></a>发布公告：Robots协议</h4><ul><li>告知所有爬虫网站的爬取策略，要求爬虫遵守</li></ul><h2 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h2><ul><li><p>作用：网站告知网络爬虫哪些页面可以爬取，哪些不行</p></li><li><p>形式：在网站根目录下的robots.txt文件</p></li></ul><h2 id="Robots协议的使用"><a href="#Robots协议的使用" class="headerlink" title="Robots协议的使用"></a>Robots协议的使用</h2><ul><li><p>网络爬虫：自动或人工识别robots.txt，再进行内容爬取</p></li><li><p>约束性：Robots协议是建议但非约束性，网络爬虫可以不遵守，但存在法律风险</p></li><li><p><strong>类人行为可不参考Robots协议</strong></p></li></ul><h2 id="访问亚马逊商品页面实例"><a href="#访问亚马逊商品页面实例" class="headerlink" title="访问亚马逊商品页面实例"></a>访问亚马逊商品页面实例</h2><p>&emsp;&emsp;我们在按照前述模板访问亚马逊页面时，会出现503的访问错误，其中一个可能的原因，就是我们用于访问的headers不被亚马逊接受。此时，我们通过前面介绍的headers参数修改，可达到爬取商品信息的目的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.amazon.cn/dp/B07TTR34CQ?ref_=Oct_DLandingS_D_5d921679_60&amp;smid=A26HDXW89ZT98L"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0'</span>&#125;  // 模拟浏览器访问</span><br><span class="line">    r = requests.get(url, headers = kv)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[<span class="number">1000</span>:<span class="number">2000</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h2 id="百度搜索关键词提交实例"><a href="#百度搜索关键词提交实例" class="headerlink" title="百度搜索关键词提交实例"></a>百度搜索关键词提交实例</h2><p>&emsp;&emsp;百度关键词搜索有着固定的地址格式，即”<a href="http://www.baidu.com/s?wd=keyword&quot;，我们可以通过Requests库来实现关键词的提交：" target="_blank" rel="noopener">http://www.baidu.com/s?wd=keyword&quot;，我们可以通过Requests库来实现关键词的提交：</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'wd'</span>: keyword&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params=kv)</span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h2 id="Beautiful-Soup库的安装"><a href="#Beautiful-Soup库的安装" class="headerlink" title="Beautiful Soup库的安装"></a>Beautiful Soup库的安装</h2><p>&emsp;&emsp;以管理员的身份运行命令行，输入命令：</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后我们验证BeautifulSoup库安装成功：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding = r.apparent_encoding</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line">(百度页面内容)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>demo = r.text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup = BeautifulSoup(demo, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(soup)</span><br><span class="line">(解析后内容)</span><br></pre></td></tr></table></figure><h2 id="Beautiful-Soup库的基本元素"><a href="#Beautiful-Soup库的基本元素" class="headerlink" title="Beautiful Soup库的基本元素"></a>Beautiful Soup库的基本元素</h2><h3 id="Beautiful-Soup库解析器"><a href="#Beautiful-Soup库解析器" class="headerlink" title="Beautiful Soup库解析器"></a>Beautiful Soup库解析器</h3><table><thead><tr><th align="center">解析器</th><th align="center">使用方法</th><th align="center">条件</th></tr></thead><tbody><tr><td align="center">bs4的HTML解析器</td><td align="center">BeautifulSoup(mk, ‘html.parser’)</td><td align="center">安装bs4库</td></tr><tr><td align="center">lxml的HTML解析器</td><td align="center">BeautifulSoup(mk, ‘lxml’)</td><td align="center">pip install lxml</td></tr><tr><td align="center">lxml的XML解析器</td><td align="center">BeautifulSoup(mk, ‘xml’)</td><td align="center">pip install lxml</td></tr><tr><td align="center">html5lib的解析器</td><td align="center">BeautifulSoup(mk, ‘html5lib’)</td><td align="center">pip install html5lib</td></tr></tbody></table><h3 id="Beautiful-Soup类的基本元素"><a href="#Beautiful-Soup类的基本元素" class="headerlink" title="Beautiful Soup类的基本元素"></a>Beautiful Soup类的基本元素</h3><table><thead><tr><th align="center">基本元素</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Tag</td><td align="center">标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td align="center">Name</td><td align="center">标签的名字，&#60;p&gt;…&#60;/p&gt;的名字是’p’，格式：&#60;tag&gt;.name</td></tr><tr><td align="center">Attributes</td><td align="center">标签的属性，字典形式组织，格式：&#60;tag&gt;.attrs</td></tr><tr><td align="center">NavigableString</td><td align="center">标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：&#60;tag&gt;.string</td></tr><tr><td align="center">Comment</td><td align="center">标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><h2 id="基于bs4库的HTML遍历方法"><a href="#基于bs4库的HTML遍历方法" class="headerlink" title="基于bs4库的HTML遍历方法"></a>基于bs4库的HTML遍历方法</h2><h3 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.contents</td><td align="center">子节点的列表，将&#60;tag&gt;所有儿子节点存入列表</td></tr><tr><td align="center">.children</td><td align="center">子节点的迭代类型，与.contents类似，用于循环遍历儿子节点</td></tr><tr><td align="center">.descendants</td><td align="center">子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">    print(child)</span><br></pre></td></tr></table></figure><h3 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.parent</td><td align="center">节点的父亲标签</td></tr><tr><td align="center">.parents</td><td align="center">节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(parent)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(parent.name)</span><br></pre></td></tr></table></figure><h3 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.next_sibling</td><td align="center">返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td align="center">.previous_sibling</td><td align="center">返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td align="center">.next_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td align="center">.previous_siblings</td><td align="center">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">    print(sibling)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line">    print(sibling)</span><br></pre></td></tr></table></figure><blockquote><p>平行遍历发生在同一个父节点下的各节点间</p></blockquote><h2 id="基于bs4库的HTML格式化"><a href="#基于bs4库的HTML格式化" class="headerlink" title="基于bs4库的HTML格式化"></a>基于bs4库的HTML格式化</h2><h3 id="bs4库的prettify方法"><a href="#bs4库的prettify方法" class="headerlink" title="bs4库的prettify方法"></a>bs4库的prettify方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line">soup.prettify()</span><br></pre></td></tr></table></figure><h2 id="三种信息标记方式"><a href="#三种信息标记方式" class="headerlink" title="三种信息标记方式"></a>三种信息标记方式</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><ul><li><p>eXtensible Markup Language</p></li><li><p>与HTML类似，也采用Tag组织结构</p></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li><p>JavaScript Object Notation</p></li><li><p>有类型的键值对 “key”: “value”</p></li></ul><h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><ul><li><p>YAML Ain’t Markup Language</p></li><li><p>无类型键值对 key: value</p></li></ul><h3 id="举例对比三种标记方式"><a href="#举例对比三种标记方式" class="headerlink" title="举例对比三种标记方式"></a>举例对比三种标记方式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">XML</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">firstName</span>&gt;</span>Tian<span class="tag">&lt;/<span class="name">firstName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lastName</span>&gt;</span>Song<span class="tag">&lt;/<span class="name">lastName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">streetAddr</span>&gt;</span>中关村南大街5号<span class="tag">&lt;/<span class="name">streetAddr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">city</span>&gt;</span>北京市<span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">zipcode</span>&gt;</span>100081<span class="tag">&lt;/<span class="name">zipcode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prof</span>&gt;</span>Computer System<span class="tag">&lt;/<span class="name">prof</span>&gt;</span><span class="tag">&lt;<span class="name">prof</span>&gt;</span>Security<span class="tag">&lt;/<span class="name">prof</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">JSON</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"firstName"</span>: <span class="string">"Tian"</span>,</span><br><span class="line">    <span class="attr">"lastName"</span> : <span class="string">"Song"</span>,</span><br><span class="line">    <span class="attr">"address"</span>  : &#123;</span><br><span class="line">                  <span class="attr">"streetAddr"</span>: <span class="string">"中关村南大街5号"</span>,</span><br><span class="line">                  <span class="attr">"city"</span>: <span class="string">"北京市"</span>,</span><br><span class="line">                  <span class="attr">"zipcode"</span>: <span class="string">"100081"</span></span><br><span class="line">                 &#125;,</span><br><span class="line">    <span class="attr">"prof"</span>     : [<span class="string">"Computer System"</span>, <span class="string">"Security"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">YAML</span></span><br><span class="line"></span><br><span class="line"><span class="attr">firstName:</span> <span class="string">Tian</span></span><br><span class="line"><span class="attr">lastName :</span> <span class="string">Song</span></span><br><span class="line"><span class="attr">address  :</span></span><br><span class="line">    <span class="attr">streetAddr:</span> <span class="string">中关村南大街5号</span></span><br><span class="line">    <span class="attr">city      :</span> <span class="string">北京市</span></span><br><span class="line">    <span class="attr">zipcode   :</span> <span class="number">100081</span></span><br><span class="line"><span class="attr">prof     :</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Computer</span> <span class="string">System</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Security</span></span><br></pre></td></tr></table></figure><p>XML 最早的通用信息标记语言，可扩展性好，但繁琐。</p><p>JSON 信息有类型，适合程序处理（js），较XML简洁。</p><p>YAML 信息无类型，文本信息比例最高，可读性好。</p><h2 id="信息提取的一般方法"><a href="#信息提取的一般方法" class="headerlink" title="信息提取的一般方法"></a>信息提取的一般方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">'a'</span>):</span><br><span class="line">    print(link.get(<span class="string">'href'</span>))</span><br></pre></td></tr></table></figure><h2 id="基于bs4库的HTML内容查找方法"><a href="#基于bs4库的HTML内容查找方法" class="headerlink" title="基于bs4库的HTML内容查找方法"></a>基于bs4库的HTML内容查找方法</h2><h3 id="find-all方法"><a href="#find-all方法" class="headerlink" title="find_all方法"></a>find_all方法</h3><p>&#60;&gt;.find_all(name, attrs, recursive, string, **kwargs)</p><p>返回一个列表类型，存储查找的结果。</p><p>name: 对标签名称的检索字符串。</p><p>attrs: 对标签属性值的检索字符串，可标注属性检索。</p><p>recursive: 是否对子孙全部检索，默认True。</p><p>string: &#60;&gt;…&#60;/&gt;中字符串区域的检索字符串。</p><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#60;&gt;.find()</td><td align="center">搜索且只返回一个结果，字符串类型，同.find_all()参数</td></tr><tr><td align="center">&#60;&gt;.find_parents()</td><td align="center">在先辈节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&#60;&gt;.find_parent()</td><td align="center">在先辈节点中返回一个结果，字符串类型，同.find_all参数</td></tr><tr><td align="center">&#60;&gt;.find_next_siblings()</td><td align="center">在后续平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&#60;&gt;.find_next_sibling()</td><td align="center">在后续平行节点中返回一个结果，字符串类型，同.find_all()参数</td></tr><tr><td align="center">&#60;&gt;.find_previous_siblings()</td><td align="center">在前序平行节点中搜索，返回列表类型，同.find_all()参数</td></tr><tr><td align="center">&#60;&gt;.find_previous_sibling()</td><td align="center">在前序平行节点中返回一个结果，字符串类型，同.find_all()参数</td></tr></tbody></table><h2 id="爬虫实例：爬取中国大学排名"><a href="#爬虫实例：爬取中国大学排名" class="headerlink" title="爬虫实例：爬取中国大学排名"></a>爬虫实例：爬取中国大学排名</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"获取失败"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:</span><br><span class="line">        <span class="keyword">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class="line">            tds = tr(<span class="string">'td'</span>)</span><br><span class="line">            ulist.append([tds[<span class="number">0</span>].string, tds[<span class="number">1</span>].string, tds[<span class="number">2</span>].string])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">    print(<span class="string">"&#123;:^10&#125;\t&#123;:^10&#125;\t&#123;:^10&#125;"</span>.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"总分"</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        u = ulist[i]</span><br><span class="line">        print(<span class="string">"&#123;:^10&#125;\t&#123;:^10&#125;\t&#123;:^10&#125;"</span>.format(u[<span class="number">0</span>], u[<span class="number">1</span>], u[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    uinfo = []</span><br><span class="line">    url = <span class="string">'http://www.zuihaodaxue.com/zuihaodaxuepaiming2020.html'</span></span><br><span class="line">    html = getHTMLText(url)</span><br><span class="line">    fillUnivList(uinfo, html)</span><br><span class="line">    printUnivList(uinfo, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><h2 id="正则表达式的常用操作符"><a href="#正则表达式的常用操作符" class="headerlink" title="正则表达式的常用操作符"></a>正则表达式的常用操作符</h2><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">表示任何单个字符</td><td align="center"></td></tr><tr><td align="center">[ ]</td><td align="center">字符集，对单个字符给出取值范围</td><td align="center">[abc]表示a、b、c，[a-z]表示a到z单个字符</td></tr><tr><td align="center">[^ ]</td><td align="center">非字符集，对单个字符给出排除范围</td><td align="center">[^abc]表示非a或b或c的单个字符</td></tr><tr><td align="center">*</td><td align="center">前一个字符0次或无限次扩展</td><td align="center">abc*表示ab、abc、abcc、abccc等</td></tr><tr><td align="center">+</td><td align="center">前一个字符1次或无限次扩展</td><td align="center">abc+表示abc、abcc、abccc等</td></tr><tr><td align="center">?</td><td align="center">前一个字符0次或1次扩展</td><td align="center">abc?表示ab、abc</td></tr><tr><td align="center">&#124;</td><td align="center">左右表达式任意一个</td><td align="center">abc&#124;def表示abc、def</td></tr><tr><td align="center">{m}</td><td align="center">扩展前一个字符m次</td><td align="center">ab{2}c表示abbc</td></tr><tr><td align="center">{m, n}</td><td align="center">扩展前一个字符m至n次（含n）</td><td align="center">ab{1, 2}c表示abc、abbc</td></tr><tr><td align="center">^</td><td align="center">匹配字符串开头</td><td align="center">^abc表示abc且在一个字符串的开头</td></tr><tr><td align="center">$</td><td align="center">匹配字符串结尾</td><td align="center">abc$表示abc且在一个字符串的结尾</td></tr><tr><td align="center">( )</td><td align="center">分组标记，内部只能使用 &#124; 操作符</td><td align="center">(abc)表示abc，(abc&#124;def)表示abc、def</td></tr><tr><td align="center">\d</td><td align="center">数字，等价于[0-9]</td><td align="center"></td></tr><tr><td align="center">\w</td><td align="center">单词字符，等价于[A-Za-z0-9_]</td><td align="center"></td></tr></tbody></table><h2 id="经典正则表达式实例"><a href="#经典正则表达式实例" class="headerlink" title="经典正则表达式实例"></a>经典正则表达式实例</h2><p>^[A-Za-z]+$              &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;由26个字母组成的字符串</p><p>^[A-Za-z0-9]+$           &emsp;&emsp;&emsp;&emsp;&ensp;由26个字母和数字组成的字符串</p><p>-?\d+$                   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;整数形式的字符串 </p><p>^[0-9]* [1-9][0-9]*$    &emsp;&emsp;&ensp;&ensp;正整数形式的字符串</p><p>[1-9]\d{5}               &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&ensp;中国境内邮政编码，6位</p><p>[\u4e00- \u9fa5]         &emsp;&emsp;&emsp;&ensp;&emsp;匹配中文字符</p><p>\d{3} -\d{8}|\d{4}-\d{7}  &emsp;&emsp;国内电话号码，010-68913536</p><h2 id="正则表达式的表示类型"><a href="#正则表达式的表示类型" class="headerlink" title="正则表达式的表示类型"></a>正则表达式的表示类型</h2><p>raw string 类型（原生字符串类型）：不必使用转义字符</p><p>string 类型，更繁琐：使用转义字符</p><h2 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h2><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.search()</td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象</td></tr><tr><td align="center">re.match()</td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回match对象</td></tr><tr><td align="center">re.findall()</td><td align="center">搜索字符串，以列表类型返回全部能匹配的子串</td></tr><tr><td align="center">re.split()</td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center">re.finditer()</td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</td></tr><tr><td align="center">re.sub()</td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><h3 id="re-search-pattern-string-flags-0"><a href="#re-search-pattern-string-flags-0" class="headerlink" title="re.search(pattern, string, flags=0)"></a>re.search(pattern, string, flags=0)</h3><ul><li><p>pattern: 正则表达式的字符串或原生字符串表示</p></li><li><p>string: 待匹配字符串</p></li><li><p>flags: 正则表达式使用时的控制标记</p></li></ul><table><thead><tr><th align="center">常用标记</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">re.I re.IGNORECASE</td><td align="center">忽略正则表达式的大小写，[A-Z]能够匹配小写字符</td></tr><tr><td align="center">re.M re.MULTILINE</td><td align="center">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td align="center">re.S re.DOTALL</td><td align="center">正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符</td></tr></tbody></table><h3 id="re-split-pattern-string-maxsplit-0-flags-0"><a href="#re-split-pattern-string-maxsplit-0-flags-0" class="headerlink" title="re.split(pattern, string, maxsplit=0, flags=0)"></a>re.split(pattern, string, maxsplit=0, flags=0)</h3><ul><li>maxsplit: 最大分割数，剩余部分作为最后一个元素输出</li></ul><h3 id="re-sub-pattern-repl-string-count-0-flags-0"><a href="#re-sub-pattern-repl-string-count-0-flags-0" class="headerlink" title="re.sub(pattern, repl, string, count=0, flags=0)"></a>re.sub(pattern, repl, string, count=0, flags=0)</h3><ul><li><p>repl: 替换匹配字符串的字符串</p></li><li><p>count: 匹配的最大替换次数</p></li></ul><h2 id="Re库的两种等价用法"><a href="#Re库的两种等价用法" class="headerlink" title="Re库的两种等价用法"></a>Re库的两种等价用法</h2><h3 id="函数式用法：一次性操作"><a href="#函数式用法：一次性操作" class="headerlink" title="函数式用法：一次性操作"></a>函数式用法：一次性操作</h3><p>rst = re.search(r’[1-9]\d{5}’, ‘BIT 100081’)</p><h3 id="面向对象用法：编译后的多次操作"><a href="#面向对象用法：编译后的多次操作" class="headerlink" title="面向对象用法：编译后的多次操作"></a>面向对象用法：编译后的多次操作</h3><p>pat = re.compile(r’[1-9]\d{5}’)</p><p>rst = pat.search(‘BIT 100081’)</p><h2 id="Match对象的属性"><a href="#Match对象的属性" class="headerlink" title="Match对象的属性"></a>Match对象的属性</h2><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.string</td><td align="center">待匹配的文本</td></tr><tr><td align="center">.re</td><td align="center">匹配时使用的pattern对象（正则表达式）</td></tr><tr><td align="center">.pos</td><td align="center">正则表达式搜索文本的开始位置</td></tr><tr><td align="center">.endpos</td><td align="center">正则表达式搜索文本的结束位置</td></tr></tbody></table><h2 id="Match对象的方法"><a href="#Match对象的方法" class="headerlink" title="Match对象的方法"></a>Match对象的方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.group(0)</td><td align="center">获得匹配后的字符串</td></tr><tr><td align="center">.start()</td><td align="center">匹配字符串在原始字符串的开始位置</td></tr><tr><td align="center">.end()</td><td align="center">匹配字符串在原始字符串的结束位置</td></tr><tr><td align="center">.span()</td><td align="center">返回(.start(), .end())</td></tr></tbody></table><h2 id="最小匹配操作符"><a href="#最小匹配操作符" class="headerlink" title="最小匹配操作符"></a>最小匹配操作符</h2><p>Re库默认是贪婪匹配，所以如果我们想要得到的结果是最小匹配，需要用如下操作符：</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*?</td><td align="center">前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td align="center">+?</td><td align="center">前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td align="center">??</td><td align="center">前一个字符0次或1次扩展，最小匹配</td></tr><tr><td align="center">{m, n}?</td><td align="center">扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><h2 id="爬虫实例：淘宝商品信息定向爬虫"><a href="#爬虫实例：淘宝商品信息定向爬虫" class="headerlink" title="爬虫实例：淘宝商品信息定向爬虫"></a>爬虫实例：淘宝商品信息定向爬虫</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()</span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parsePage</span><span class="params">(ilt, html)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plt = re.findall(<span class="string">r'\"view_price\":\"[\d.]*\"'</span>, html)</span><br><span class="line">        tlt = re.findall(<span class="string">r'\"raw_title\":\".*?\"'</span>, html)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(plt)):</span><br><span class="line">            price = eval(plt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            title = eval(tlt[i].split(<span class="string">':'</span>)[<span class="number">1</span>])</span><br><span class="line">            ilt.append([price, title])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printGoodsList</span><span class="params">(ilt)</span>:</span></span><br><span class="line">    tplt = <span class="string">"&#123;:4&#125;\t&#123;:8&#125;\t&#123;:16&#125;"</span></span><br><span class="line">    print(tplt.format(<span class="string">'序号'</span>, <span class="string">'价格'</span>, <span class="string">'商品名称'</span>))</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> ilt:</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        print(tplt.format(count, g[<span class="number">0</span>], g[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    goods = <span class="string">'书包'</span></span><br><span class="line">    depth = <span class="number">2</span> <span class="comment"># 搜索深度</span></span><br><span class="line">    start_url = <span class="string">'https://s.taobao.com/search?q='</span> + goods</span><br><span class="line">    infoList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(depth):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            url = start_url + <span class="string">'&amp;s='</span> + str(<span class="number">44</span>*i)</span><br><span class="line">            html = getHTMLText(url)</span><br><span class="line">            parsePage(infoList, html)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    printGoodsList(infoList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><blockquote><p>但是该代码未解决登录问题</p></blockquote><h2 id="requests库与Scrapy库对比"><a href="#requests库与Scrapy库对比" class="headerlink" title="requests库与Scrapy库对比"></a>requests库与Scrapy库对比</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li><p>两者都可以进行页面请求和爬取，Python爬虫的两个重要技术路线</p></li><li><p>两者可用性都好，文档丰富，入门简单</p></li><li><p>两者都没有处理js、提交表单、应对验证码等功能（可扩展）</p></li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><table><thead><tr><th align="center">requests</th><th align="center">Scrapy</th></tr></thead><tbody><tr><td align="center">页面级爬虫</td><td align="center">网站级爬虫</td></tr><tr><td align="center">功能库</td><td align="center">框架</td></tr><tr><td align="center">并发性考虑不足，性能较差</td><td align="center">并发性好，性能较高</td></tr><tr><td align="center">重点在于页面下载</td><td align="center">重点在于爬虫结构</td></tr><tr><td align="center">定制灵活</td><td align="center">一般定制灵活，深度定制困难</td></tr><tr><td align="center">上手十分简单</td><td align="center">入门稍难</td></tr></tbody></table><h3 id="选择建议"><a href="#选择建议" class="headerlink" title="选择建议"></a>选择建议</h3><ul><li><p>非常小的需求，选用requests库</p></li><li><p>不太小的需求，选用Scrapy框架</p></li><li><p>定制程度很高的需求（不考虑规模），自搭框架，建议选用requests库</p></li></ul><h2 id="Scrapy爬虫的常用命令"><a href="#Scrapy爬虫的常用命令" class="headerlink" title="Scrapy爬虫的常用命令"></a>Scrapy爬虫的常用命令</h2><table><thead><tr><th align="center">命令</th><th align="center">说明</th><th align="center">格式</th></tr></thead><tbody><tr><td align="center">startproject</td><td align="center">创建一个新工程</td><td align="center">scrapy startproject &#60;name&gt; [dir]</td></tr><tr><td align="center">genspider</td><td align="center">创建一个爬虫</td><td align="center">scrapy genspider [options] &#60;name&gt; &#60;domain&gt;</td></tr><tr><td align="center">settings</td><td align="center">获得爬虫配置信息</td><td align="center">scrapy settings [options]</td></tr><tr><td align="center">crawl</td><td align="center">运行一个爬虫</td><td align="center">scrapy crawl &#60;spider&gt;</td></tr><tr><td align="center">list</td><td align="center">列出工程中所有爬虫</td><td align="center">scrapy list</td></tr><tr><td align="center">shell</td><td align="center">启动URL调试命令行</td><td align="center">scrapy shell [url]</td></tr></tbody></table><h2 id="Scrapy产生步骤"><a href="#Scrapy产生步骤" class="headerlink" title="Scrapy产生步骤"></a>Scrapy产生步骤</h2><h3 id="步骤1：建立一个Scrapy爬虫工程"><a href="#步骤1：建立一个Scrapy爬虫工程" class="headerlink" title="步骤1：建立一个Scrapy爬虫工程"></a>步骤1：建立一个Scrapy爬虫工程</h3><p>在命令行中输入如下命令：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">H:\NJU Documents\爬虫练习&gt;scrapy startproject Demo</span><br><span class="line">New Scrapy project 'Demo', using template directory 'c:\users\12099\appdata\local\programs\python\python37\lib\site-packages\scrapy\templates\project', created in:</span><br><span class="line">    H:\NJU Documents\爬虫练习\Demo</span><br><span class="line"></span><br><span class="line">You can start your first spider with:</span><br><span class="line">    cd Demo</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p>生成的工程目录：</p><pre><code>Demo/ : 外层目录    scrapy.cfg : 部署Scrapy爬虫的配置文件    Demo/ : Scrapy框架的用户自定义Python代码        __init__.py : 初始化脚本        items.py : Items代码模板（继承类）        middlewares.py : Middlewares代码模板（继承类）        pipelines.py : Pipelines代码模板（继承类）        settings.py : Scrapy爬虫的配置文件        spiders/ : Spiders代码模板目录（继承类）            __init__.py : 初始文件，无需修改            __pycache__/ : 缓存目录，无需修改</code></pre><h3 id="步骤2：在工程中产生一个Scrapy爬虫"><a href="#步骤2：在工程中产生一个Scrapy爬虫" class="headerlink" title="步骤2：在工程中产生一个Scrapy爬虫"></a>步骤2：在工程中产生一个Scrapy爬虫</h3><p>在命令行输入如下命令：</p><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">H:\NJU Documents\爬虫练习&gt;cd Demo</span><br><span class="line"></span><br><span class="line">H:\NJU Documents\爬虫练习\Demo&gt;scrapy genspider demo http://www.neea.edu.cn/</span><br><span class="line">Created spider 'demo' using template 'basic' in module:</span><br><span class="line">  Demo.spiders.demo</span><br></pre></td></tr></table></figure><p>这时会在”H:\NJU Documents\爬虫练习\Demo\Demo\spiders”中生成demo.py。</p><h3 id="步骤3：配置产生的spider爬虫"><a href="#步骤3：配置产生的spider爬虫" class="headerlink" title="步骤3：配置产生的spider爬虫"></a>步骤3：配置产生的spider爬虫</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'demo'</span></span><br><span class="line">    <span class="comment">#allowed_domains = ['http://www.neea.edu.cn']</span></span><br><span class="line">    start_urls = [<span class="string">'http://www.neea.edu.cn'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        fname = response.url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">with</span> open(fname, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s.'</span> % fname)</span><br></pre></td></tr></table></figure><h3 id="步骤4：运行爬虫，获取网页"><a href="#步骤4：运行爬虫，获取网页" class="headerlink" title="步骤4：运行爬虫，获取网页"></a>步骤4：运行爬虫，获取网页</h3><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">H:\NJU Documents\爬虫练习\Demo&gt;scrapy crawl demo</span><br><span class="line">2020-05-28 22:04:25 [scrapy.utils.log] INFO: Scrapy 2.1.0 started (bot: Demo)</span><br><span class="line">2020-05-28 22:04:25 [scrapy.utils.log] INFO: Versions: lxml 4.5.1.0, libxml2 2.9.5, cssselect 1.1.0, parsel 1.6.0, w3lib 1.22.0, Twisted 20.3.0, Python 3.7.7 (tags/v3.7.7:d7c567b08f, Mar 10 2020, 10:41:24) [MSC v.1900 64 bit (AMD64)], pyOpenSSL 19.1.0 (OpenSSL 1.1.1g  21 Apr 2020), cryptography 2.9.2, Platform Windows-10-10.0.18362-SP0</span><br><span class="line">2020-05-28 22:04:25 [scrapy.utils.log] DEBUG: Using reactor: twisted.internet.selectreactor.SelectReactor</span><br><span class="line">2020-05-28 22:04:25 [scrapy.crawler] INFO: Overridden settings:</span><br><span class="line">&#123;'BOT_NAME': 'Demo',</span><br><span class="line"> 'NEWSPIDER_MODULE': 'Demo.spiders',</span><br><span class="line"> 'ROBOTSTXT_OBEY': True,</span><br><span class="line"> 'SPIDER_MODULES': ['Demo.spiders']&#125;</span><br><span class="line">2020-05-28 22:04:25 [scrapy.extensions.telnet] INFO: Telnet Password: 8755d2342189c68e</span><br><span class="line">2020-05-28 22:04:25 [scrapy.middleware] INFO: Enabled extensions:</span><br><span class="line">['scrapy.extensions.corestats.CoreStats',</span><br><span class="line"> 'scrapy.extensions.telnet.TelnetConsole',</span><br><span class="line"> 'scrapy.extensions.logstats.LogStats']</span><br><span class="line">2020-05-28 22:04:25 [scrapy.middleware] INFO: Enabled downloader middlewares:</span><br><span class="line">['scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.retry.RetryMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.cookies.CookiesMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.stats.DownloaderStats']</span><br><span class="line">2020-05-28 22:04:25 [scrapy.middleware] INFO: Enabled spider middlewares:</span><br><span class="line">['scrapy.spidermiddlewares.httperror.HttpErrorMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.offsite.OffsiteMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.referer.RefererMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.depth.DepthMiddleware']</span><br><span class="line">2020-05-28 22:04:25 [scrapy.middleware] INFO: Enabled item pipelines:</span><br><span class="line">[]</span><br><span class="line">2020-05-28 22:04:25 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2020-05-28 22:04:25 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">2020-05-28 22:04:25 [scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2020-05-28 22:04:26 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET http://www.neea.edu.cn/robots.txt&gt; (referer: None)</span><br><span class="line">2020-05-28 22:04:26 [protego] DEBUG: Rule at line 11 without any user agent to enforce it on.</span><br><span class="line">2020-05-28 22:04:26 [protego] DEBUG: Rule at line 13 without any user agent to enforce it on.</span><br><span class="line">2020-05-28 22:04:26 [protego] DEBUG: Rule at line 15 without any user agent to enforce it on.</span><br><span class="line">2020-05-28 22:04:26 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://www.neea.edu.cn&gt; (referer: None)</span><br><span class="line">2020-05-28 22:04:26 [demo] DEBUG: Saved file www.neea.edu.cn.</span><br><span class="line">2020-05-28 22:04:26 [scrapy.core.engine] INFO: Closing spider (finished)</span><br><span class="line">2020-05-28 22:04:26 [scrapy.statscollectors] INFO: Dumping Scrapy stats:</span><br><span class="line">&#123;'downloader/request_bytes': 440,</span><br><span class="line"> 'downloader/request_count': 2,</span><br><span class="line"> 'downloader/request_method_count/GET': 2,</span><br><span class="line"> 'downloader/response_bytes': 18932,</span><br><span class="line"> 'downloader/response_count': 2,</span><br><span class="line"> 'downloader/response_status_count/200': 1,</span><br><span class="line"> 'downloader/response_status_count/404': 1,</span><br><span class="line"> 'elapsed_time_seconds': 0.35053,</span><br><span class="line"> 'finish_reason': 'finished',</span><br><span class="line"> 'finish_time': datetime.datetime(2020, 5, 28, 14, 4, 26, 206306),</span><br><span class="line"> 'log_count/DEBUG': 6,</span><br><span class="line"> 'log_count/INFO': 10,</span><br><span class="line"> 'response_received_count': 2,</span><br><span class="line"> 'robotstxt/request_count': 1,</span><br><span class="line"> 'robotstxt/response_count': 1,</span><br><span class="line"> 'robotstxt/response_status_count/404': 1,</span><br><span class="line"> 'scheduler/dequeued': 1,</span><br><span class="line"> 'scheduler/dequeued/memory': 1,</span><br><span class="line"> 'scheduler/enqueued': 1,</span><br><span class="line"> 'scheduler/enqueued/memory': 1,</span><br><span class="line"> 'start_time': datetime.datetime(2020, 5, 28, 14, 4, 25, 855776)&#125;</span><br><span class="line">2020-05-28 22:04:26 [scrapy.core.engine] INFO: Spider closed (finished)</span><br></pre></td></tr></table></figure><h2 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h2><ul><li><p>yield等价于“生成器”</p></li><li><p>生成器是一个不断产生值的函数</p></li><li><p>包含yield语句的函数是一个生成器</p></li><li><p>生成器每次产生一个值（yield语句），函数被冻结，被唤醒后再产生一个值</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">yield</span> i**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> gen(<span class="number">5</span>):</span><br><span class="line">        print(i, <span class="string">" "</span>, end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><h3 id="生成器相比一次列出所有内容的优势"><a href="#生成器相比一次列出所有内容的优势" class="headerlink" title="生成器相比一次列出所有内容的优势"></a>生成器相比一次列出所有内容的优势</h3><ul><li><p>更节省存储空间</p></li><li><p>响应更迅速</p></li><li><p>使用更灵活</p></li></ul><p><em>本教程内容整理自 <a href="https://www.icourse163.org/learn/BIT-1001870001?tid=1450316449#/learn/content" target="_blank" rel="noopener">Python网络爬虫与信息提取</a>。</em></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开发微信小程序（四）</title>
      <link href="/2020/04/26/wechat4/"/>
      <url>/2020/04/26/wechat4/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;上一章我们从页面的实战开发角度讲解了前端代码编写的一些技巧，本章我们继续探讨小程序前端页面开发的技巧与应避开的大坑。（是的，我踩了一个很大的坑，到现在才发现）</p><h2 id="（划重点！划重点！划重点！）view-布局"><a href="#（划重点！划重点！划重点！）view-布局" class="headerlink" title="（划重点！划重点！划重点！）view 布局"></a><strong>（划重点！划重点！划重点！）view 布局</strong></h2><p>&emsp;&emsp;说真的，对于初学者来说，view布局这一块在网上查来查去就是弹性盒子、flex、弹性盒子、flex……反复横跳，我昨天查了一晚上怎么让文字在图片的右侧靠右显示（前提是文字在图片上方），答案无一不是float、right、float、right……反复横跳。那么我就从实际应用的角度来介绍两个常用的view布局。</p><h3 id="弹性盒子布局"><a href="#弹性盒子布局" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h3><p>&emsp;&emsp;因网上关于这个的资料太多，此处只说优点和缺点。</p><p>&emsp;&emsp;优点：</p><ul><li><p>简单方便，快速对齐，快速布局</p></li><li><p>网上资料多，可借鉴代码多</p></li></ul><p>&emsp;&emsp;缺点：</p><ul><li><p>灵活性太差，尤其是对初学者而言（比如我）</p></li><li><p>margin调整位置受前一个view的影响</p></li><li><p>很难做到横向对齐的同时纵向对齐（即，很难做到横向弹性盒子和纵向弹性盒子同时设置）</p></li></ul><h3 id="自由布局"><a href="#自由布局" class="headerlink" title="自由布局"></a>自由布局</h3><p>&emsp;&emsp;对外层view不声明flex，内层位置的调节只靠margin-top和margin-left，小程序对右对齐的适配性极差（个人观点），因此能以左边框为基准就不以右边框为基准。</p><h2 id="实现qq列表下拉功能代码模板"><a href="#实现qq列表下拉功能代码模板" class="headerlink" title="实现qq列表下拉功能代码模板"></a><strong>实现qq列表下拉功能代码模板</strong></h2><p>&emsp;&emsp;多层嵌套渲染列表与列表展开/收起的应用，类似开发可直接借鉴下述模板。</p><p>&emsp;&emsp;.wxml文件代码模板：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'pagename'</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  // 下拉条列表渲染逻辑（第一层列表）</span><br><span class="line">  <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for-items</span> = <span class="string">"&#123;&#123;missionInfoData&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">"bar"</span> <span class="attr">bindtap</span> = <span class="string">'toggleBtn'</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;item.id&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">'barimage &#123;&#123;item.id &gt; 0?"":"hidden"&#125;&#125;'</span> <span class="attr">src</span>=<span class="string">'&#123;&#123;item.imgurl&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">'barimage &#123;&#123;item.id &gt; 0?"hidden":""&#125;&#125;'</span> <span class="attr">src</span>=<span class="string">'&#123;&#123;item.imgurl1&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'barinfo'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'barname'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.barname&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'barnum'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.barnum&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>/<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item.barNum&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    //下拉内容列表渲染逻辑（第二层列表）</span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for-items</span> = <span class="string">"&#123;&#123;item.content&#125;&#125;"</span> <span class="attr">wx:for-item</span> = <span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">"mission &#123;&#123;item.id &gt; 0?'hidden':''&#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'timeimageview'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">'timeimage'</span> <span class="attr">src</span>=<span class="string">'/icons/resttime.png'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'timetextview'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span> = <span class="string">'timetextnum'</span>&gt;</span>&#123;&#123;content.day&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span>&gt;</span>天<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'missionnameview'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'missionnameview1'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;content.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'missionnameview2'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;content.type&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'stateview'</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">'stateimage'</span> <span class="attr">src</span>=<span class="string">'&#123;&#123;content.statecolor&#125;&#125;'</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;.js文件代码模板:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    missionInfoData: []</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      <span class="string">"datas"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">"imgurl"</span>: <span class="string">"/images/ingbar.png"</span>,</span><br><span class="line">          <span class="string">"imgurl1"</span>: <span class="string">"/images/ingbar1.png"</span>,</span><br><span class="line">          <span class="string">"barname"</span>: <span class="string">"在读图书"</span>,</span><br><span class="line">          <span class="string">"barnum"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">"barNum"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="string">"content"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              day: <span class="number">20</span>,</span><br><span class="line">              name: <span class="string">"小程序入门"</span>,</span><br><span class="line">              type: <span class="string">"计算机"</span>,</span><br><span class="line">              statecolor: <span class="string">"/icons/lamp.png"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              day: <span class="number">10</span>,</span><br><span class="line">              name: <span class="string">"小程序实战"</span>,</span><br><span class="line">              type: <span class="string">"计算机"</span>,</span><br><span class="line">              statecolor: <span class="string">"/icons/lamp.png"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              day: <span class="number">30</span>,</span><br><span class="line">              name: <span class="string">"资本论"</span>,</span><br><span class="line">              type: <span class="string">"经济学"</span>,</span><br><span class="line">              statecolor: <span class="string">"/icons/lamp1.png"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">"imgurl"</span>: <span class="string">"/images/ingbar.png"</span>,</span><br><span class="line">          <span class="string">"imgurl1"</span>: <span class="string">"/images/ingbar1.png"</span>,</span><br><span class="line">          <span class="string">"barname"</span>: <span class="string">"在阅资源"</span>,</span><br><span class="line">          <span class="string">"barnum"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">"barNum"</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">"content"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              day: <span class="number">15</span>,</span><br><span class="line">              name: <span class="string">"概率论.pdf"</span>,</span><br><span class="line">              type: <span class="string">"数学"</span>,</span><br><span class="line">              statecolor: <span class="string">"/icons/lamp.png"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              day: <span class="number">20</span>,</span><br><span class="line">              name: <span class="string">"计算机网络.pdf"</span>,</span><br><span class="line">              type: <span class="string">"计算机"</span>,</span><br><span class="line">              statecolor: <span class="string">"/icons/lamp.png"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="string">"imgurl"</span>: <span class="string">"/images/ingbar.png"</span>,</span><br><span class="line">          <span class="string">"imgurl1"</span>: <span class="string">"/images/ingbar1.png"</span>,</span><br><span class="line">          <span class="string">"barname"</span>: <span class="string">"当前竞赛"</span>,</span><br><span class="line">          <span class="string">"barnum"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">"barNum"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">"content"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              day: <span class="number">35</span>,</span><br><span class="line">              name: <span class="string">"高校小程序开发大赛"</span>,</span><br><span class="line">              type: <span class="string">"应用比赛"</span>,</span><br><span class="line">              statecolor: <span class="string">"/icons/lamp.png"</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      missionInfoData: data.datas</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 实现各列表展开独立进行，也可设置全局变量实现唯一列表展开</span></span><br><span class="line">  toggleBtn: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> itemId = event.currentTarget.id;</span><br><span class="line">    <span class="keyword">if</span>(itemId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      itemId = -itemId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不这样处理的话会报错</span></span><br><span class="line">    <span class="keyword">var</span> up = <span class="string">"missionInfoData["</span> + (itemId - <span class="number">1</span>) + <span class="string">"].id"</span>;</span><br><span class="line">    <span class="keyword">var</span> resId = -event.currentTarget.id;</span><br><span class="line">    that.setData (&#123;</span><br><span class="line">      [up]: resId</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;.wxss文件代码模板：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.topInfo</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topImage1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topImage2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">630</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barimage</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barname</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">70</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">78</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barinfo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.barnum</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>:<span class="number">675</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mission</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: whitesmoke;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.missionnameview</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">230</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">120</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.missionnameview1</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.missionnameview2</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timeimageview</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timeimage</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.timetextview</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stateview</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">683</span>rpx;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.stateimage</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 显示/隐藏属性</span><br><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开发微信小程序（三）</title>
      <link href="/2020/04/22/wechat3/"/>
      <url>/2020/04/22/wechat3/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;本章节将以一个具体的小程序界面为例，介绍前端页面开发的知识和技巧，前面几章讲过的内容将不再赘述。</p><h2 id="绘制界面原型"><a href="#绘制界面原型" class="headerlink" title="绘制界面原型"></a><strong>绘制界面原型</strong></h2><p>&emsp;&emsp;在绘制界面原型之前，我们需要先以文档的形式，将页面功能点陈列出来，此处省略这一步骤，直接进入界面原型设计的讲解。</p><h3 id="绘制工具"><a href="#绘制工具" class="headerlink" title="绘制工具"></a>绘制工具</h3><p>&emsp;&emsp;界面原型设计的工具因人而异，我采用的是Photoshop，特点就是麻烦，对，因为当时不知道<a href="https://modao.cc/downloads" target="_blank" rel="noopener">墨刀</a>之类的专业界面原型设计工具。</p><h3 id="绘制要点（偏向于Ps）"><a href="#绘制要点（偏向于Ps）" class="headerlink" title="绘制要点（偏向于Ps）"></a>绘制要点（偏向于Ps）</h3><ul><li><p>界面原型设计力求一步到位（否则就可能像我一样，反反复复重写.wxss文件）</p></li><li><p>多参考好的界面设计，集大成</p></li><li><p>Ps一定要保存原有图层</p></li><li><p>Ps导出.png图片时，如果是对已有图案的修改，直接覆盖，避免同类图片冗余</p></li><li><p>大量的矢量图标都不需要自己绘制（这也是血的教训，自己画的图标又不标准又耗时），登录 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a> 进行搜索下载</p></li><li><p>一般的界面设计都能通过编程实现，只有难易之分，所以设计时不要顾虑太多后期的实现策略（但是动态背景或者听起来就比较高级的还是先放一放，开发前期还是着力搭建框架）</p></li><li><p>界面原型设计的画布采用与微信开发小程序预览界面相同像素大小，对于之后的编程只有好处没有坏处（否则你就只能像我一样，疯狂修改.wxss里的数据，一次次地真机调试，浪费了大量时间）</p></li></ul><h2 id="界面前端编程"><a href="#界面前端编程" class="headerlink" title="界面前端编程"></a><strong>界面前端编程</strong></h2><p>&emsp;&emsp;新建界面的要点在上一章已经讲得很清楚，我们从已经初始化页面配置开始讲起。</p><h3 id="设置页面背景"><a href="#设置页面背景" class="headerlink" title="设置页面背景"></a>设置页面背景</h3><h4 id="1-修改背景颜色"><a href="#1-修改背景颜色" class="headerlink" title="1. 修改背景颜色"></a>1. 修改背景颜色</h4><p>&emsp;&emsp;小程序页面默认背景颜色是白色，如果我们要改变当前页面的背景色，打开newpage.wxss进行修改：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: whitesmoke;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;小程序支持两种颜色代码，一种是图示的颜色英文名称，另一种是十六进制代码，使用Ps的同学可以直接在Ps调色板中获取到所需颜色的十六进制代码。</p><h4 id="2-修改背景图片"><a href="#2-修改背景图片" class="headerlink" title="2. 修改背景图片"></a>2. 修改背景图片</h4><p>&emsp;&emsp;小程序背景图片的添加有些特殊，本地的图片一般是不能直接作为背景图片，当我们添加了本地图片作为背景时，图片无法显示，以及会出现如下报错：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pages&#x2F;newpage&#x2F;newpage.wxss 中的本地资源图片无法通过 WXSS 获取，可以使用网络图片，或者 base64，或者使用&lt;image&#x2F;&gt;标签。请参考文档：https:&#x2F;&#x2F;developers.weixin.qq.com&#x2F;miniprogram&#x2F;dev&#x2F;qa.html#%E6%9C%AC%E5%9C%B0%E8%B5%84%E6%BA%90%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87-wxss-%E8%8E%B7%E5%8F%96</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对于这种情况，最好的解决办法是将本地图片上传到oss，获取图片的url，写入.wxss中，但是如果我们坚持使用本地图片，则需要在.js文件中输入：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把base64转换成图片</span></span><br><span class="line">  getBase64ImageUrl(data) &#123;</span><br><span class="line">    <span class="comment">// 获取到base64Data</span></span><br><span class="line">    <span class="keyword">var</span> base64Data = data;</span><br><span class="line">    <span class="comment">/// 通过微信小程序自带方法将base64转为二进制去除特殊符号，再转回base64</span></span><br><span class="line">    base64Data = wx.arrayBufferToBase64(wx.base64ToArrayBuffer(base64Data));</span><br><span class="line">    <span class="comment">/// 拼接请求头，data格式可以为image/png或者image/jpeg等，看需求</span></span><br><span class="line">    <span class="keyword">const</span> base64ImgUrl = <span class="string">"data:image/png;base64,"</span> + base64Data;</span><br><span class="line">    <span class="comment">/// 刷新数据</span></span><br><span class="line">    <span class="comment">// console.log(base64ImgUrl)</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      baseImgUrl:base64ImgUrl</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样就能将我们的本地图片转化成base64，判断成功的依据是，重新编译时出现弹窗，选中我们的背景图片，系统会自动生成一段编码（非常非常长），这时将我们原背景图片地址替换成这段编码，即可显示在我们的小程序中。（但是我后来在用的时候发现有的时候没有弹窗也没有报错，实在是不推荐这种方式）</p><h4 id="3-设置多层次的页面背景"><a href="#3-设置多层次的页面背景" class="headerlink" title="3. 设置多层次的页面背景"></a>3. 设置多层次的页面背景</h4><p>&emsp;&emsp;有时，我们并不想页面呈现一个简单的图片，而是希望多种图片叠加在一起，形成组合样式，那么我们将要用到view这一工具来实现我们的想法，在.wxml文件中输入下述代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'page'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'image1'</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'image2'</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们只是简单构建了三个view，外层view和内层的两个view，内层的两个view用来装我们的图片，外层view用来控制内层view的分布。在.wxss文件中输入下述代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.image1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这时我们会看到背景中出现一蓝一红矩形框，两个矩形框大小相同，纵向分布。对于两个矩形的布局可参考前一章讲的弹性盒子布局，而如果我们想要实现下方的红色矩形框覆盖一部分上方的蓝色矩形框，可通过margin这一利器实现：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.image1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们将会看到红色矩形框向上移动了100rpx。对于参数的调节，我建议初学者多调多试，在不了解页面属性的时候，通过简单的改变数值来得到自己想要的效果。</p><blockquote><p>这里需要特别强调的一点是，我们在页面布局时，如果是纵向布局，我们应采用横向开发，即调整好当前行的内容及样式后，再进行下一行的开发。我踩的一个大坑就是急于布局，将纵向框架搭好然后填充内容，结果填充的时候发现预留尺寸出现问题，当然如果前期界面原型设计准确的话，也可以采用先搭整体框架再开发的方法。</p></blockquote><h3 id="设置元素样式"><a href="#设置元素样式" class="headerlink" title="设置元素样式"></a>设置元素样式</h3><h4 id="1-元素样式基本配置"><a href="#1-元素样式基本配置" class="headerlink" title="1. 元素样式基本配置"></a>1. 元素样式基本配置</h4><p>&emsp;&emsp;为什么这一章会单独提一下这个问题，是因为我在开发过程中总是会无意地漏掉一些元素的基本属性配置，导致出现不期的效果，而迟迟找不到原因，浪费了很多时间。对于内层view元素（即view中不再嵌套view），我们通常需要如下样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.image2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尤其需要注意我们要优先设置元素的宽和高，比如我前面举的红蓝矩形块的例子，如果不设置宽高，就会看不到颜色块。另外，对于文字以及图片独有的样式配置，不在此赘述，有需要的样式在网上查找资料就好了。而对于外层view元素（即view中嵌套view），我们通常需要如下样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pageid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  overflow: hidden;  // 设置图片样式时需注意</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;尤其需要注意，这些属性的配置我虽然在上一章写过，但是整体大小（height）的配置仍然是很容易被忽略掉的。</p><h4 id="2-美化元素样式"><a href="#2-美化元素样式" class="headerlink" title="2. 美化元素样式"></a>2. 美化元素样式</h4><p>&emsp;&emsp;元素样式的美化通常是通过设置css属性，但对于初学者而言，对css属性设置了解较少，以及对多种属性搭配的效果把握不好，因此我建议很多看似需要多重view嵌套的部分可以直接用Ps封装代替。</p><p>&emsp;&emsp;比如我们需要实现一个按钮，那么按钮大概有以下几种样式需要实现：未按按钮时按钮的文字样式和背景图片样式，按了按钮之后的文字样式和背景图片样式，文字样式和背景图片样式的布局。那么对于按钮这种固定样式，我们最好采用贴图的方式，在Ps中直接绘制未按和已按的两种按钮样式，并保留图片原格式以及导出.png文件，加载到小程序页面中。注意，小程序是支持image标签直接引用本地图片的，这一点要和背景图片区分。</p><p>&emsp;&emsp;再比如我们要实现某种特殊字体，导入字体包固然是一种方式，但如果是仅改变标题或者一些固定出现的字的话，也可以考虑采用Ps贴图的方式快速实现。</p><h4 id="3-元素显示与隐藏"><a href="#3-元素显示与隐藏" class="headerlink" title="3. 元素显示与隐藏"></a>3. 元素显示与隐藏</h4><p>&emsp;&emsp;元素的显示与隐藏是小程序前端开发的核心知识，对于初学者的开发很有用处。我们在实现页面跳转的时候，很多时候是当前页面跳到当前页面，也就是说，我们只希望当前页面的一些部分发生变化，而页面本身还是原来的页面。那此时我们需要搞明白变化的到底是什么，其实是view的替换。举前面红蓝矩形块的例子，我们希望点击红色矩形块，下方的蓝色矩形块变成一个绿色的圆。那么我们其实原本就有三个view元素，红色矩形块、蓝色矩形块、绿色的圆，只是我们未点击红色矩形块时，蓝色矩形块显示，绿色圆隐藏；点击之后，蓝色矩形块隐藏，绿色圆显示。关于这一块内容，我将在以后的章节中详细讲解，此处我只给出网上查找的实例代码，初学者可以通过模仿代码结构来实现自己想要的效果：</p><p>.wxml文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"switch-type"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn &#123;&#123;currentSelectTripType == 'pinche' ? 'active' : ''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">'selectedPinche'</span> <span class="attr">data-id</span>=<span class="string">'pinche'</span>&gt;</span>拼车<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"btn &#123;&#123;currentSelectTripType == 'baoche' ? 'active' : ''&#125;&#125;"</span> <span class="attr">bindtap</span>=<span class="string">'selectedBaoche'</span> <span class="attr">data-id</span>=<span class="string">'baoche'</span>&gt;</span>包车<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.js文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentSelectTripType: <span class="string">'pinche'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 更新data 切换选中状态</span></span><br><span class="line">  selectedPinche: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      currentSelectTripType: e.currentTarget.dataset.id</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  selectedBaoche: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      currentSelectTripType: e.currentTarget.dataset.id</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>.wxss文件</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.switch-type</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dfdfdf</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10</span>rpx <span class="number">40</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.switch-type</span> <span class="selector-class">.btn</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2</span>rpx solid <span class="number">#007bff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>原文 <a href="https://www.shiqidu.com/d/469" target="_blank" rel="noopener">https://www.shiqidu.com/d/469</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iDo-wechat</title>
      <link href="/2020/04/18/iDo-wechat/"/>
      <url>/2020/04/18/iDo-wechat/</url>
      
        <content type="html"><![CDATA[<h1 id="iDo-微信小程序介绍文档"><a href="#iDo-微信小程序介绍文档" class="headerlink" title="iDo 微信小程序介绍文档"></a><strong>iDo 微信小程序介绍文档</strong></h1><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>&emsp;&emsp;进入大学，面对丰富多彩的大学生活，很多同学往往因为突然涌来的大量信息，或是缺少途径了解适合自己的信息，时常会感到茫然。不知道自己从何入手，不知道如何规划自己的大学生活。陷入明明有很多事情可做，却因目标不明确或盲目选择等等原因而贻误了大学学习的宝贵时光。</p><h2 id="项目理念"><a href="#项目理念" class="headerlink" title="项目理念"></a>项目理念</h2><p>&emsp;&emsp;该项目旨在通过提供用户多种可选择的学习目标，帮助用户确立本科期间的长远目标，以及为达到长远目标帮助规划可由用户自主选择的短期目标，并根据设定的目标提供精准的信息，从一本书、一份资料、一场竞赛……开始，及时提醒用户完成一个又一个的短期任务，陪伴用户以梦为马，不负韶华。</p><h2 id="项目定位"><a href="#项目定位" class="headerlink" title="项目定位"></a>项目定位</h2><p>&emsp;&emsp;为大学生更好地完成学业或进一步深造提供强有力的信息支持与目标引领（陪跑小程序）。</p><h3 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h3><p>&emsp;&emsp;本科生。</p><h2 id="程序界面"><a href="#程序界面" class="headerlink" title="程序界面"></a>程序界面</h2><h3 id="初始登录授权界面"><a href="#初始登录授权界面" class="headerlink" title="初始登录授权界面"></a>初始登录授权界面</h3><p>&emsp;<img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/login.png"  height=400px title="初始登录授权界面" ></p><h3 id="我的”界面设计"><a href="#我的”界面设计" class="headerlink" title="我的”界面设计"></a>我的”界面设计</h3><p>&emsp;<img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/mine.png"  height=400px title="“我的”界面设计" ></p><h3 id="进行中”界面设计"><a href="#进行中”界面设计" class="headerlink" title="进行中”界面设计"></a>进行中”界面设计</h3><p>&emsp;<img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/running.png"  height=400px title="“进行中”界面设计"></p><h3 id="推荐”界面设计"><a href="#推荐”界面设计" class="headerlink" title="推荐”界面设计"></a>推荐”界面设计</h3><p>&emsp;<img src="/img/loading.gif" class="lazyload" data-src="https://cdn.jsdelivr.net/gh/icimence/CDN/wechat/home.png"  height=400px title="“推荐”界面设计"></p><blockquote><p>p1: 初始登录授权界面；p2: “我的”界面设计；p3: “进行中”界面设计；p4: “推荐”界面设计</p></blockquote><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="新用户登录"><a href="#新用户登录" class="headerlink" title="新用户登录"></a>新用户登录</h3><ul><li><p>新用户登录显示p1，即初始登录授权界面，开始画面可采用打字机效果，图片中文字仅供参考；</p></li><li><p>登录授权后，进入新人引导阶段（图片未展示），新人引导会向新用户介绍小程序的核心功能：目标制定、信息获取、任务提醒，并引导新用户进入“我的”界面进行目标设定；</p></li><li><p>进入“我的”界面后，初始状态仅显示“添加目标专业”（图片未展示），添加目标专业后（可多选），“我的”界面如p2所示；</p></li><li><p>余下使用说明见“老用户使用”</p></li></ul><h3 id="老用户使用"><a href="#老用户使用" class="headerlink" title="老用户使用"></a>老用户使用</h3><ul><li><p>打开“我的”界面修改当前目标（此步骤可跳过）；</p></li><li><p>打开“推荐”界面，可看到更新的推荐信息，推荐信息由用户制定的目标决定；</p></li><li><p>浏览推荐信息，收藏感兴趣以及对自己有帮助的条目（可在“我的”界面查看）；</p></li><li><p>打开“进行中”界面，添加新任务（“我的”界面紧急任务栏随之更新）</p></li></ul><h2 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h2><ul><li><p>显示用户使用小程序天数</p></li><li><p>新建/修改目标专业</p></li><li><p>推荐专业相关信息</p></li><li><p>推荐信息分类</p></li><li><p>推荐信息可收藏</p></li><li><p>收藏栏可显示/新建分组</p></li><li><p>新建/完成/搁置/删除任务</p></li><li><p>任务栏分组显示</p></li><li><p>任务栏可新建/删除分组</p></li><li><p>统计板显示完成/搁置/删除数目</p></li><li><p>紧急任务栏显示/修改截止日期最近的任务</p></li><li><p>支持问题反馈</p></li></ul><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ul><li><p>2020/04/16 20:00  <strong>V1.2</strong> 小程序改版，增加更新记录，提供版本号记录。更新用户界面图片加载。</p></li><li><p>2020/04/16 20:36 <strong>V1.2.1</strong> 优化文档结构。</p></li><li><p>2020/04/17 18:43 <strong>V1.2.2</strong> 优化项目理念文字描述。</p></li><li><p>2020/04/17 22:14 <strong>V1.2.3</strong> 优化项目理念文字描述。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从零开发微信小程序（二）</title>
      <link href="/2020/04/16/wechat2/"/>
      <url>/2020/04/16/wechat2/</url>
      
        <content type="html"><![CDATA[<p>在上一章节的介绍中，我们已经做好了开发小程序的准备，那么本章将从创建第一个页面开始，逐步讲解小程序的开发过程。</p><h2 id="创建第一个页面"><a href="#创建第一个页面" class="headerlink" title="创建第一个页面"></a><strong>创建第一个页面</strong></h2><ul><li><p>首先，创建一个存放页面的总文件夹pages，并在其中创建第一个页面的文件夹about，在about文件夹中，新建页面所需的四个基本文件.js, .json, .wxml, .wxss.</p></li><li><p>接下来，逐一解决报错问题：</p></li></ul><ol><li>app.json不能为空，且应存放小程序各页面的路径，通过创建名为pages的字符串数组实现</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "pages": ["pages/about/about"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;同理，about.json不能为空，在文件中写入{}即可。</p><ol start="2"><li>about.js中注册about页面对象</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Page(&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>至此，第一个页面创建成功，预览界面显示刚创建的空白页面</li></ul><blockquote><p>我们在后续添加新的页面时，也要将文件路径添加到app.json文件中，如果我们希望此时预览的是新建的页面，则将字符串数组中的第一个值设为我们新添加的路径。</p></blockquote><h2 id="配置页面（快速布局）"><a href="#配置页面（快速布局）" class="headerlink" title="配置页面（快速布局）"></a><strong>配置页面（快速布局）</strong></h2><ul><li>添加页面标题</li></ul><p>页面标题的配置在.json文件中，打开about.json文件</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "navigationBarTitleText": "此处添入标题名称",</span><br><span class="line">    "navigationBarBackgroundColor": "#fff",  // 此处添入颜色十六进制代码</span><br><span class="line">    "navigationBarTextStyle": "black"  // 此处添入标题样式 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加页面内容</li></ul><p>页面内容的配置在.wxml文件中，打开about.wxml文件，我们来实现一个简单的图文显示</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span> = <span class="string">'container'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span> = <span class="string">"/images/xxx.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>第一段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>第二段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>第三段文字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加页面样式</li></ul><p>页面样式的配置在.wxss文件中，打开about.wxss文件，我们来实现一个简单的弹性盒子布局</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>至此，我们已经对新建的页面进行了最简单的配置。</li></ul><h2 id="页面样式配置方法（持续更新）"><a href="#页面样式配置方法（持续更新）" class="headerlink" title="页面样式配置方法（持续更新）"></a><strong>页面样式配置方法（持续更新）</strong></h2><h3 id="响应式长度单位rpx"><a href="#响应式长度单位rpx" class="headerlink" title="响应式长度单位rpx"></a>响应式长度单位rpx</h3><p>解决如何让元素大小适配不同宽度屏幕的问题。小程序规定所有设备的屏幕宽度均为750rpx，因此我们按照比例设置图片大小，即可在所有设备上得到同样的效果。</p><p>.wxml示例代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span> = <span class="string">'about-banner'</span> <span class="attr">src</span> = <span class="string">"/images/xxx.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.wxss示例代码如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.about-banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">375</span>rpx;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">375</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置简单的页面跳转"><a href="#设置简单的页面跳转" class="headerlink" title="设置简单的页面跳转"></a>设置简单的页面跳转</h3><p>使用navigator组件可实现简单的页面跳转，我们新建一个home页面，经过上述过程简单配置后，我们想要实现从about页到home页的跳转。</p><p>about.wxml部分示例代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 实际上以下内容在同一行显示</span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>我想跳转到<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;<span class="name">navigator</span> <span class="attr">style</span> = <span class="string">'display: inline;'</span> <span class="attr">url</span> = <span class="string">'/pages/home/home'</span> <span class="attr">open-type</span> = <span class="string">"navigator"</span> <span class="attr">hover-class</span> = <span class="string">'nav-hover'</span> <span class="attr">class</span> = <span class="string">'nav-default'</span>&gt;</span>home<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>页面<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>about.wxss部分示例代码如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-default</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意一定要将同行显示的文字置于view块内，navigator的style才能生效。</p></blockquote><blockquote><p>注意nav-default与nav-hover的顺序问题，</p></blockquote><h3 id="设置tabBar（标签栏）"><a href="#设置tabBar（标签栏）" class="headerlink" title="设置tabBar（标签栏）"></a>设置tabBar（标签栏）</h3><p>tabBar是对若干一级页面的入口链接，我们想要实现通过点击小程序底部的导航栏按钮来切换不同的一级页面。</p><p>app.json部分示例代码如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"home"</span>,</span><br><span class="line">                <span class="attr">"pagePath"</span>: <span class="string">"pages/home/home"</span>,</span><br><span class="line">                <span class="attr">"iconPath"</span>: <span class="string">"images/icons/xxx.png"</span>,</span><br><span class="line">                <span class="attr">"selectedIconPath"</span>: <span class="string">"images/icons/xxx.png"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"about"</span>,</span><br><span class="line">                <span class="attr">"pagePath"</span>: <span class="string">"pages/about/about"</span>,</span><br><span class="line">                <span class="attr">"iconPath"</span>: <span class="string">"images/icons/xxx.png"</span>,</span><br><span class="line">                <span class="attr">"selectedIconPath"</span>: <span class="string">"images/icons/xxx.png"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但此时会导致我们上述简单跳转操作出错，原因是添加标签栏之后，我们期待的是跳转页面以及切换标签栏两个操作，通过将about.wxml中的navigator的open-type由navigator改为switchTab，可以解决这个问题。</p></blockquote><h3 id="统一顶部导航栏配置"><a href="#统一顶部导航栏配置" class="headerlink" title="统一顶部导航栏配置"></a>统一顶部导航栏配置</h3><p>一般我们的小程序每一个页面的顶部导航栏，都应该采用统一的样式，我们可以在app.json中对此进行配置。</p><p>app.json部分示例代码如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"window"</span>: &#123;</span><br><span class="line">        <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">        <span class="attr">"navigationBarTextStyle"</span>: <span class="string">"black"</span>,</span><br><span class="line">        <span class="attr">"navigationBarText"</span>: <span class="string">"blank"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研帮app功能解析</title>
      <link href="/2020/04/11/kaoyanbang/"/>
      <url>/2020/04/11/kaoyanbang/</url>
      
        <content type="html"><![CDATA[<p>考研帮app —— 考研一站式移动学习平台，有超过200万2020届考研人在考研帮查信息、下资料、交研友、找学长、背单词、做真题、听课程。</p><h2 id="考研帮使用流程及功能"><a href="#考研帮使用流程及功能" class="headerlink" title="考研帮使用流程及功能"></a><strong>考研帮使用流程及功能</strong></h2><ul><li><h3 id="注册-登录"><a href="#注册-登录" class="headerlink" title="注册/登录"></a>注册/登录</h3></li></ul><p>考研帮app采用手机号注册/登录一体方式，用户输入手机号，接收验证码，已注册用户直接登录，未注册用户系统自动帮助注册，注册时仅需要填写昵称、考研时间及上传头像。</p><ul><li><h3 id="底部导航栏"><a href="#底部导航栏" class="headerlink" title="底部导航栏"></a><strong>底部导航栏</strong></h3></li></ul><ol><li><p>日历（即初始界面）</p></li><li><p>院校</p></li><li><p>社区</p></li><li><p>课程（付费）</p></li><li><p>我</p></li></ol><ul><li><h3 id="日历（初始界面）"><a href="#日历（初始界面）" class="headerlink" title="日历（初始界面）"></a><strong>日历（初始界面）</strong></h3></li></ul><ol><li><p>显示考研倒计时</p></li><li><p>打卡功能</p></li><li><p>每日一句功能</p></li><li><p>每日热点</p></li><li><p>今日任务（初始为空）</p></li><li><p>背单词（内置单词词库）</p></li><li><p>高分经验（付费）</p></li><li><p>研题库（初始为空）</p></li><li><p>研训</p></li><li><p>参考书</p></li><li><p>资料8折（付费）</p></li><li><p>初试估分</p></li><li><p>找学长（付费）</p></li></ol><h3 id="院校"><a href="#院校" class="headerlink" title="院校"></a><strong>院校</strong></h3><p><strong>以下为首次登录时操作步骤</strong></p><ol><li>填写目标专业和目标院校，填写信息包括专业分类、具体专业、学硕专硕、所在地区、毕业院校、目标院校地区与名称</li></ol><blockquote><p>注：目标院校可添加多所，目标专业只能添加一个</p></blockquote><ol start="2"><li><p>填写后上方显示目标专业排行第一的院校信息，中间显示“找学长”、“分数线”、“报录比”、“讨论组”、“知名导师”、“备考经验”，下方显示“学校论坛”、“院校资讯”、“招生信息”、“招生简章”、“专业目录”、“报录分析”、“复试调剂”、“专业目录”、“专业介绍”</p></li><li><p>界面右上角提供“院校对比”功能，可选择目标专业，添加多所目标院校进行比较</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 调查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调查 </tag>
            
            <tag> 参考资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论公式笔记（持续更新）</title>
      <link href="/2020/04/10/probability-note/"/>
      <url>/2020/04/10/probability-note/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a><strong>第一章</strong></h2><ul><li><h3 id="超几何分布概率公式"><a href="#超几何分布概率公式" class="headerlink" title="超几何分布概率公式"></a>超几何分布概率公式</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20224654.png"  alt=""></p><blockquote><p>N件产品，D件次品，任取n件，恰有k件次品的概率。</p></blockquote><ul><li><h3 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20112625.png"  alt=""></p><ul><li><h3 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20225516.png"  alt=""></p><ul><li><h3 id="乘法公式的推广"><a href="#乘法公式的推广" class="headerlink" title="乘法公式的推广"></a>乘法公式的推广</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20225800.png"  alt=""></p><ul><li><h3 id="全概率公式"><a href="#全概率公式" class="headerlink" title="全概率公式"></a>全概率公式</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20225933.png"  alt=""></p><ul><li><h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20230038.png"  alt=""></p><ul><li><h3 id="独立性"><a href="#独立性" class="headerlink" title="独立性"></a>独立性</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20105723.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20110318.png"  alt=""></p><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a><strong>第二章</strong></h2><ul><li><h3 id="分布律"><a href="#分布律" class="headerlink" title="分布律"></a>分布律</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20164641.png"  alt=""></p><ul><li><h3 id="0-—-1-分布"><a href="#0-—-1-分布" class="headerlink" title="(0 — 1)分布"></a>(0 — 1)分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20165205.png"  alt=""></p><ul><li><h3 id="伯努利分布"><a href="#伯努利分布" class="headerlink" title="伯努利分布"></a>伯努利分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20165715.png"  alt=""></p><ul><li><h3 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20165915.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20165957.png"  alt=""></p><ul><li><h3 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a>泊松分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20173901.png"  alt=""></p><ul><li><h3 id="泊松定理"><a href="#泊松定理" class="headerlink" title="泊松定理"></a>泊松定理</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20174751.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20175220.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20175315.png"  alt=""></p><ul><li><h3 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20175948.png"  alt=""></p><ul><li><h3 id="连续型随机变量"><a href="#连续型随机变量" class="headerlink" title="连续型随机变量"></a>连续型随机变量</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-12%20181807.png"  alt=""></p><ul><li><h3 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-16%20220540.png"  alt=""></p><ul><li><h3 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-16%20221048.png"  alt=""></p><ul><li><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-16%20221649.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-16%20222558.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-16%20223242.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-16%20223423.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-17%20095444.png"  alt=""></p><ul><li><h3 id="随机变量的函数的分布"><a href="#随机变量的函数的分布" class="headerlink" title="随机变量的函数的分布"></a>随机变量的函数的分布</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-20%20092005.png"  alt=""></p><hr><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a><strong>第三章</strong></h2><ul><li><h3 id="二维随机变量的分布函数"><a href="#二维随机变量的分布函数" class="headerlink" title="二维随机变量的分布函数"></a>二维随机变量的分布函数</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-20%20093417.png"  alt=""></p><ul><li><h3 id="联合分布律"><a href="#联合分布律" class="headerlink" title="联合分布律"></a>联合分布律</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-05-02%20145248.png"  alt=""></p><ul><li><h3 id="二维随机变量概率密度"><a href="#二维随机变量概率密度" class="headerlink" title="二维随机变量概率密度"></a>二维随机变量概率密度</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-20%20093954.png"  alt=""></p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-20%20094007.png"  alt=""></p><ul><li><h3 id="二维随机变量边缘概率密度"><a href="#二维随机变量边缘概率密度" class="headerlink" title="二维随机变量边缘概率密度"></a>二维随机变量边缘概率密度</h3></li></ul><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-20%20095645.png"  alt=""></p><h2 id="—-gt-to-be-continued"><a href="#—-gt-to-be-continued" class="headerlink" title="—&gt; to be continued"></a>—&gt; to be continued</h2>]]></content>
      
      
      <categories>
          
          <category> 课程笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 课程笔记 </tag>
            
            <tag> 公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个不会翻车的孜然炒菜配方</title>
      <link href="/2020/04/10/cuminRecipe/"/>
      <url>/2020/04/10/cuminRecipe/</url>
      
        <content type="html"><![CDATA[<p>孜然富含精油，气味芳香浓烈，被认为是继胡椒外世界第二重要的香料作物；孜然也有多种药用特性，能够理气开胃、祛寒除湿等 ，还具有抗过敏、抗氧化、抗血小板聚集和降血糖等保健功效。好的，那么今天我们来做孜然牛肉 ^_^</p><h2 id="用料"><a href="#用料" class="headerlink" title="用料"></a><strong>用料</strong></h2><ul><li><h3 id="食盐"><a href="#食盐" class="headerlink" title="食盐"></a>食盐</h3></li><li><h3 id="料酒"><a href="#料酒" class="headerlink" title="料酒"></a>料酒</h3></li><li><h3 id="孜然"><a href="#孜然" class="headerlink" title="孜然"></a>孜然</h3></li><li><h3 id="花椒"><a href="#花椒" class="headerlink" title="花椒"></a>花椒</h3></li><li><h3 id="杭椒"><a href="#杭椒" class="headerlink" title="杭椒"></a>杭椒</h3></li><li><h3 id="小米椒"><a href="#小米椒" class="headerlink" title="小米椒"></a>小米椒</h3></li><li><h3 id="辣椒粉"><a href="#辣椒粉" class="headerlink" title="辣椒粉"></a>辣椒粉</h3></li><li><h3 id="葱"><a href="#葱" class="headerlink" title="葱"></a>葱</h3></li><li><h3 id="姜"><a href="#姜" class="headerlink" title="姜"></a>姜</h3></li><li><h3 id="生抽"><a href="#生抽" class="headerlink" title="生抽"></a>生抽</h3></li><li><h3 id="食用油"><a href="#食用油" class="headerlink" title="食用油"></a>食用油</h3></li><li><h3 id="淀粉"><a href="#淀粉" class="headerlink" title="淀粉"></a>淀粉</h3></li><li><h3 id="牛肉"><a href="#牛肉" class="headerlink" title="牛肉"></a>牛肉</h3></li></ul><blockquote><p>关于调料的用量，后续会专门写一篇博客讲解，这里就不标注用量了。</p></blockquote><h2 id="用料注解"><a href="#用料注解" class="headerlink" title="用料注解"></a><strong>用料注解</strong></h2><ul><li><h3 id="料酒用来去除牛肉的膻味"><a href="#料酒用来去除牛肉的膻味" class="headerlink" title="料酒用来去除牛肉的膻味"></a>料酒用来去除牛肉的膻味</h3></li><li><h3 id="花椒这里采用的是花椒粒，当然也可以用花椒粉"><a href="#花椒这里采用的是花椒粒，当然也可以用花椒粉" class="headerlink" title="花椒这里采用的是花椒粒，当然也可以用花椒粉"></a>花椒这里采用的是花椒粒，当然也可以用花椒粉</h3></li><li><h3 id="杭椒和小米椒也可以用普通辣椒代替"><a href="#杭椒和小米椒也可以用普通辣椒代替" class="headerlink" title="杭椒和小米椒也可以用普通辣椒代替"></a>杭椒和小米椒也可以用普通辣椒代替</h3></li><li><h3 id="生抽就是家用酱油"><a href="#生抽就是家用酱油" class="headerlink" title="生抽就是家用酱油"></a>生抽就是家用酱油</h3></li></ul><blockquote><p>关于调料的功效，后续也会专门写一篇博客讲解，这里只列出一部分。</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h2><ol><li><p>视牛肉部位而定，如果牛肉本身筋比较多，不易炒烂，那么就先水煮半个小时到一个小时；否则，直接进行腌制步骤。</p></li><li><p>葱切段，杭椒小米椒切段，置于一个料碟中。</p></li><li><p>姜切末，置于一个料碟中。</p></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><strong>步骤</strong></h2><ul><li><h3 id="腌制"><a href="#腌制" class="headerlink" title="腌制"></a>腌制</h3></li></ul><p>将生牛肉或煮熟的牛肉置于盘中，加适量食盐、生抽、料酒，加切好的姜末，加淀粉，腌制十到二十分钟。</p><blockquote><p>腌制等待不是必须的，也可以加完料之后直接准备下锅，腌制是为了更入味。</p></blockquote><ul><li><h3 id="调底料"><a href="#调底料" class="headerlink" title="调底料"></a>调底料</h3></li></ul><p>空锅下入花椒粒和孜然，开小火，煸出香味即可，关火。向煸好的花椒粒和孜然中倒入铺满锅底的食用油（也可以少加一些油，减小油腻感），开大火，烧至锅中冒轻烟关火，期间用锅铲不断翻动花椒粒和孜然，避免糊锅。待油温稍凉，加入切好的葱段和杭椒小米椒，爆锅，开小火，烧至香味四溢。</p><ul><li><h3 id="炒牛肉"><a href="#炒牛肉" class="headerlink" title="炒牛肉"></a>炒牛肉</h3></li></ul><p>下入腌制好的牛肉，改大火快速翻炒，牛肉颜色均匀后加入辣椒粉（根据个人口味也可再添加少许食盐），继续翻炒至牛肉色泽呈熟状（或略黑），即可关火出锅。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>这个配方不仅适用于炒牛肉，适当调整辣椒的比例，也可以用来做香辣土豆片等相关孜然菜系。</p><p>参考资料：<a href="https://baijiahao.baidu.com/s?id=1603992135987217878&wfr=spider&for=pc&isFailFlag=1" target="_blank" rel="noopener">孜然牛肉的做法</a></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美食 </tag>
            
            <tag> 做菜 </tag>
            
            <tag> 配方 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开发微信小程序（一）</title>
      <link href="/2020/04/10/wechat1/"/>
      <url>/2020/04/10/wechat1/</url>
      
        <content type="html"><![CDATA[<p>小程序是一种新的开放能力，开发者可以快速地开发一个小程序。小程序可以在微信内被便捷地获取和传播，同时具有出色的使用体验。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a><strong>流程</strong></h1><ul><li><h2 id="小程序的优势"><a href="#小程序的优势" class="headerlink" title="小程序的优势"></a><a href="#小程序的优势">小程序的优势</a></h2></li><li><h2 id="小程序开发工具"><a href="#小程序开发工具" class="headerlink" title="小程序开发工具"></a><a href="#小程序开发工具">小程序开发工具</a></h2></li><li><h2 id="基本目录文件结构配置"><a href="#基本目录文件结构配置" class="headerlink" title="基本目录文件结构配置"></a><a href="#基本目录文件结构配置">基本目录文件结构配置</a></h2></li></ul><h2 id="小程序的优势-1"><a href="#小程序的优势-1" class="headerlink" title="小程序的优势"></a><strong>小程序的优势</strong></h2><p>微信小程序是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或者搜一下即可打开应用。也体现了“用完即走”的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无需安装卸载。对于开发者而言，微信小程序开发门槛相对较低，难度不及 APP，能够满足简单的基础应用，适合生活服务类线下商铺以及非刚需低频应用的转换。微信小程序能够实现消息通知、线下扫码、公众号关联等七大功能。</p><h2 id="小程序开发工具-1"><a href="#小程序开发工具-1" class="headerlink" title="小程序开发工具"></a><strong>小程序开发工具</strong></h2><p>首先，登录 <a href="https://mp.weixin.qq.com/cgi-bin/wx" target="_blank" rel="noopener">https://mp.weixin.qq.com/cgi-bin/wx</a> 注册小程序，填写注册信息注册成功后，点击图示按钮获取小程序ID (AppID)，</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20102714.png"  alt=""></p><p>之后下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html" target="_blank" rel="noopener">开发者工具</a>，至此，小程序开发的准备工作基本完成。</p><h2 id="基本目录文件结构配置-1"><a href="#基本目录文件结构配置-1" class="headerlink" title="基本目录文件结构配置"></a><strong>基本目录文件结构配置</strong></h2><p>打开微信开发者工具，在如下界面中：</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20103429.png"  alt=""></p><p>填写项目名称、目录等信息，AppID为注册小程序的AppID，新手开发可选择“不使用云服务”，语言选择Javascript，点击“新建”，进入到开发界面。</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20103930.png"  alt=""></p><p>我们可以看到预置的界面效果，界面左侧是小程序代码的效果图，中间资源管理器是我们的代码文件区，右上方空白界面是代码界面，右下方可观测控制台输出等信息。</p><p>在资源管理器中，删除预置的pages文件夹（或清空文件夹里面的内容）和utils文件夹，</p><blockquote><p>其实是我还没弄明白这些预置的文件夹是做什么用的，反正新手最好还是尽量从零搭建</p></blockquote><p>接着清空app.js、app.json、app.wxss中的内容，你会看到控制台报错，</p><p><img src="/img/loading.gif" class="lazyload" data-src="https://nandodu-blog.oss-cn-shanghai.aliyuncs.com/%E6%89%B9%E6%B3%A8%202020-04-10%20104613.png"  alt=""></p><p>但是没有关系，接下来的教程我将一步一步告诉你如何看懂并处理这些报错。至此，一个小程序的空白项目建立完毕。</p><p>—&gt; to be continued</p>]]></content>
      
      
      <categories>
          
          <category> 小程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wechat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的创建:hexo 从零开始到搭建完整</title>
      <link href="/2020/04/09/createHexo/"/>
      <url>/2020/04/09/createHexo/</url>
      
        <content type="html"><![CDATA[<p>这篇博客采用 github page 平台托管的方式，利用 hexo 作为一个快速简洁的博客框架，用它来从零搭建博客。</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a><strong>流程</strong></h1><ul><li><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a><a href="#安装Git">安装 Git</a></h2></li><li><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a><a href="#安装Node.js">安装 Node.js</a></h2></li><li><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a><a href="#安装Hexo">安装 Hexo</a></h2></li><li><h2 id="GitHub-创建个人仓库"><a href="#GitHub-创建个人仓库" class="headerlink" title="GitHub 创建个人仓库"></a><a href="#GitHub创建个人仓库">GitHub 创建个人仓库</a></h2></li><li><h2 id="将-hexo-部署到-GitHub"><a href="#将-hexo-部署到-GitHub" class="headerlink" title="将 hexo 部署到 GitHub"></a><a href="#将hexo部署到GitHub">将 hexo 部署到 GitHub</a></h2></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a><strong>安装Git</strong></h2><p>windows : 到 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a> 官网上下载, 下载后会有一个 Git Bash 的命令行工具，以后就用这个工具来使用 git。</p><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a><strong>安装Node.js</strong></h2><p>windows : <a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a> 选择 LTS 版本就行了。<br/><br>运行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>检查是否安装成功。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a><strong>安装Hexo</strong></h2><p>npm 在使用前最好先进行<a href="https://www.jianshu.com/p/4aaf929bfa71" target="_blank" rel="noopener">换源</a>。<br/><br>打开 cmd，输入命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>查看 hexo 是否安装成功。安装成功后，新建一个空文件夹 blog，并右键运行 Git Bash。</p><p>在 Git Bash 中输入命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>完成 hexo 的初始化。之后输入命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>输入命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>成功时应显示</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO Start processing</span><br><span class="line">INFO Hexo is running at http:&#x2F;&#x2F;localhost4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>在浏览器中输入地址 <a href="http://localhost4000，即可看到" target="_blank" rel="noopener">http://localhost4000，即可看到</a> hexo 为我们默认生成的博客界面。浏览后，使用 ctrl+c 退出服务。</p><h2 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a><strong>GitHub创建个人仓库</strong></h2><p>首先，你先要有一个 GitHub 账户。</p><p>注册完登录后，在 GitHub.com 中看到一个 New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加 .github.io，只有这样，将来要部署到 GitHub page 的时候，才会被识别，也就是 xxxx.github.io，其中 xxx 就是你注册 GitHub 的用户名。</p><p>点击 create repository。</p><h2 id="将hexo部署到GitHub"><a href="#将hexo部署到GitHub" class="headerlink" title="将hexo部署到GitHub"></a><strong>将hexo部署到GitHub</strong></h2><p>安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后打开站点配置文件 _config.yml，翻到最后，修改为 YourgithubName，就是你的GitHub账户</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>其中 hexo clean 清除了你之前生成的东西。</p><p>hexo generate 顾名思义，生成静态文章，可以用 hexo g 缩写。</p><p>hexo deploy 部署文章，可以用 hexo d 缩写</p><p>注意 deploy 时可能要你输入 username 和 password。</p><p>无报错，则表示部署成功，过一会儿就可以在 <a href="http://yourname.github.io" target="_blank" rel="noopener">http://yourname.github.io</a> 这个网站看到你的博客了！</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h1><p>博客的创建到这里只是完成了小小的一步，后续的更换主题、注册域名都需要你在此教程基础上搜索相关内容进行配置，基础薄弱的人（比如我）一般需要耗费一下午甚至一晚上的时间，才能让自己的博客得以见人。我是 NandoDu，一个非技术宅，希望这篇教程可以帮到你。</p><p>资料来源：<a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a>、<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">hexo史上最全搭建教程</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 零基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 零基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/09/hello-world/"/>
      <url>/2020/04/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
